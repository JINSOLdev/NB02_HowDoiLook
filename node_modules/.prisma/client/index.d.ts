
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Style
 * 
 */
export type Style = $Result.DefaultSelection<Prisma.$StylePayload>
/**
 * Model Curation
 * 
 */
export type Curation = $Result.DefaultSelection<Prisma.$CurationPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model StyleTag
 * 
 */
export type StyleTag = $Result.DefaultSelection<Prisma.$StyleTagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CategoryType: {
  TOP: 'TOP',
  BOTTOM: 'BOTTOM',
  OUTER: 'OUTER',
  DRESS: 'DRESS',
  BAG: 'BAG',
  SHOES: 'SHOES',
  ACCESSORY: 'ACCESSORY'
};

export type CategoryType = (typeof CategoryType)[keyof typeof CategoryType]

}

export type CategoryType = $Enums.CategoryType

export const CategoryType: typeof $Enums.CategoryType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Styles
 * const styles = await prisma.style.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Styles
   * const styles = await prisma.style.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.style`: Exposes CRUD operations for the **Style** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Styles
    * const styles = await prisma.style.findMany()
    * ```
    */
  get style(): Prisma.StyleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.curation`: Exposes CRUD operations for the **Curation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Curations
    * const curations = await prisma.curation.findMany()
    * ```
    */
  get curation(): Prisma.CurationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.styleTag`: Exposes CRUD operations for the **StyleTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StyleTags
    * const styleTags = await prisma.styleTag.findMany()
    * ```
    */
  get styleTag(): Prisma.StyleTagDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Style: 'Style',
    Curation: 'Curation',
    Comment: 'Comment',
    Category: 'Category',
    Image: 'Image',
    Tag: 'Tag',
    StyleTag: 'StyleTag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "style" | "curation" | "comment" | "category" | "image" | "tag" | "styleTag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Style: {
        payload: Prisma.$StylePayload<ExtArgs>
        fields: Prisma.StyleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findFirst: {
            args: Prisma.StyleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findMany: {
            args: Prisma.StyleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          create: {
            args: Prisma.StyleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          createMany: {
            args: Prisma.StyleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StyleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          delete: {
            args: Prisma.StyleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          update: {
            args: Prisma.StyleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          deleteMany: {
            args: Prisma.StyleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StyleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StyleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          upsert: {
            args: Prisma.StyleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          aggregate: {
            args: Prisma.StyleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStyle>
          }
          groupBy: {
            args: Prisma.StyleGroupByArgs<ExtArgs>
            result: $Utils.Optional<StyleGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleCountArgs<ExtArgs>
            result: $Utils.Optional<StyleCountAggregateOutputType> | number
          }
        }
      }
      Curation: {
        payload: Prisma.$CurationPayload<ExtArgs>
        fields: Prisma.CurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          findFirst: {
            args: Prisma.CurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          findMany: {
            args: Prisma.CurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>[]
          }
          create: {
            args: Prisma.CurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          createMany: {
            args: Prisma.CurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>[]
          }
          delete: {
            args: Prisma.CurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          update: {
            args: Prisma.CurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          deleteMany: {
            args: Prisma.CurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>[]
          }
          upsert: {
            args: Prisma.CurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurationPayload>
          }
          aggregate: {
            args: Prisma.CurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCuration>
          }
          groupBy: {
            args: Prisma.CurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurationCountArgs<ExtArgs>
            result: $Utils.Optional<CurationCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      StyleTag: {
        payload: Prisma.$StyleTagPayload<ExtArgs>
        fields: Prisma.StyleTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          findFirst: {
            args: Prisma.StyleTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          findMany: {
            args: Prisma.StyleTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>[]
          }
          create: {
            args: Prisma.StyleTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          createMany: {
            args: Prisma.StyleTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StyleTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>[]
          }
          delete: {
            args: Prisma.StyleTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          update: {
            args: Prisma.StyleTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          deleteMany: {
            args: Prisma.StyleTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StyleTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StyleTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>[]
          }
          upsert: {
            args: Prisma.StyleTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleTagPayload>
          }
          aggregate: {
            args: Prisma.StyleTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStyleTag>
          }
          groupBy: {
            args: Prisma.StyleTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<StyleTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleTagCountArgs<ExtArgs>
            result: $Utils.Optional<StyleTagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    style?: StyleOmit
    curation?: CurationOmit
    comment?: CommentOmit
    category?: CategoryOmit
    image?: ImageOmit
    tag?: TagOmit
    styleTag?: StyleTagOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StyleCountOutputType
   */

  export type StyleCountOutputType = {
    curations: number
    categories: number
    comments: number
    images: number
    styleTags: number
  }

  export type StyleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curations?: boolean | StyleCountOutputTypeCountCurationsArgs
    categories?: boolean | StyleCountOutputTypeCountCategoriesArgs
    comments?: boolean | StyleCountOutputTypeCountCommentsArgs
    images?: boolean | StyleCountOutputTypeCountImagesArgs
    styleTags?: boolean | StyleCountOutputTypeCountStyleTagsArgs
  }

  // Custom InputTypes
  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleCountOutputType
     */
    select?: StyleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountCurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurationWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountStyleTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleTagWhereInput
  }


  /**
   * Count Type CurationCountOutputType
   */

  export type CurationCountOutputType = {
    comments: number
  }

  export type CurationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | CurationCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * CurationCountOutputType without action
   */
  export type CurationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurationCountOutputType
     */
    select?: CurationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CurationCountOutputType without action
   */
  export type CurationCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    styleTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    styleTags?: boolean | TagCountOutputTypeCountStyleTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountStyleTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleTagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Style
   */

  export type AggregateStyle = {
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  export type StyleAvgAggregateOutputType = {
    styleId: number | null
    curationCount: number | null
    viewCount: number | null
  }

  export type StyleSumAggregateOutputType = {
    styleId: number | null
    curationCount: number | null
    viewCount: number | null
  }

  export type StyleMinAggregateOutputType = {
    styleId: number | null
    nickname: string | null
    title: string | null
    content: string | null
    password: string | null
    curationCount: number | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StyleMaxAggregateOutputType = {
    styleId: number | null
    nickname: string | null
    title: string | null
    content: string | null
    password: string | null
    curationCount: number | null
    viewCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StyleCountAggregateOutputType = {
    styleId: number
    nickname: number
    title: number
    content: number
    password: number
    curationCount: number
    viewCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StyleAvgAggregateInputType = {
    styleId?: true
    curationCount?: true
    viewCount?: true
  }

  export type StyleSumAggregateInputType = {
    styleId?: true
    curationCount?: true
    viewCount?: true
  }

  export type StyleMinAggregateInputType = {
    styleId?: true
    nickname?: true
    title?: true
    content?: true
    password?: true
    curationCount?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StyleMaxAggregateInputType = {
    styleId?: true
    nickname?: true
    title?: true
    content?: true
    password?: true
    curationCount?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StyleCountAggregateInputType = {
    styleId?: true
    nickname?: true
    title?: true
    content?: true
    password?: true
    curationCount?: true
    viewCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StyleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Style to aggregate.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Styles
    **/
    _count?: true | StyleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StyleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StyleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleMaxAggregateInputType
  }

  export type GetStyleAggregateType<T extends StyleAggregateArgs> = {
        [P in keyof T & keyof AggregateStyle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyle[P]>
      : GetScalarType<T[P], AggregateStyle[P]>
  }




  export type StyleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleWhereInput
    orderBy?: StyleOrderByWithAggregationInput | StyleOrderByWithAggregationInput[]
    by: StyleScalarFieldEnum[] | StyleScalarFieldEnum
    having?: StyleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleCountAggregateInputType | true
    _avg?: StyleAvgAggregateInputType
    _sum?: StyleSumAggregateInputType
    _min?: StyleMinAggregateInputType
    _max?: StyleMaxAggregateInputType
  }

  export type StyleGroupByOutputType = {
    styleId: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount: number
    viewCount: number
    createdAt: Date
    updatedAt: Date
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  type GetStyleGroupByPayload<T extends StyleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleGroupByOutputType[P]>
            : GetScalarType<T[P], StyleGroupByOutputType[P]>
        }
      >
    >


  export type StyleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    nickname?: boolean
    title?: boolean
    content?: boolean
    password?: boolean
    curationCount?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    curations?: boolean | Style$curationsArgs<ExtArgs>
    categories?: boolean | Style$categoriesArgs<ExtArgs>
    comments?: boolean | Style$commentsArgs<ExtArgs>
    images?: boolean | Style$imagesArgs<ExtArgs>
    styleTags?: boolean | Style$styleTagsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["style"]>

  export type StyleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    nickname?: boolean
    title?: boolean
    content?: boolean
    password?: boolean
    curationCount?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["style"]>

  export type StyleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    nickname?: boolean
    title?: boolean
    content?: boolean
    password?: boolean
    curationCount?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["style"]>

  export type StyleSelectScalar = {
    styleId?: boolean
    nickname?: boolean
    title?: boolean
    content?: boolean
    password?: boolean
    curationCount?: boolean
    viewCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StyleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"styleId" | "nickname" | "title" | "content" | "password" | "curationCount" | "viewCount" | "createdAt" | "updatedAt", ExtArgs["result"]["style"]>
  export type StyleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curations?: boolean | Style$curationsArgs<ExtArgs>
    categories?: boolean | Style$categoriesArgs<ExtArgs>
    comments?: boolean | Style$commentsArgs<ExtArgs>
    images?: boolean | Style$imagesArgs<ExtArgs>
    styleTags?: boolean | Style$styleTagsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StyleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StyleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StylePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Style"
    objects: {
      curations: Prisma.$CurationPayload<ExtArgs>[]
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
      styleTags: Prisma.$StyleTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      styleId: number
      nickname: string
      title: string
      content: string
      password: string
      curationCount: number
      viewCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["style"]>
    composites: {}
  }

  type StyleGetPayload<S extends boolean | null | undefined | StyleDefaultArgs> = $Result.GetResult<Prisma.$StylePayload, S>

  type StyleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StyleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StyleCountAggregateInputType | true
    }

  export interface StyleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Style'], meta: { name: 'Style' } }
    /**
     * Find zero or one Style that matches the filter.
     * @param {StyleFindUniqueArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StyleFindUniqueArgs>(args: SelectSubset<T, StyleFindUniqueArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Style that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StyleFindUniqueOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StyleFindUniqueOrThrowArgs>(args: SelectSubset<T, StyleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Style that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StyleFindFirstArgs>(args?: SelectSubset<T, StyleFindFirstArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Style that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StyleFindFirstOrThrowArgs>(args?: SelectSubset<T, StyleFindFirstOrThrowArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Styles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Styles
     * const styles = await prisma.style.findMany()
     * 
     * // Get first 10 Styles
     * const styles = await prisma.style.findMany({ take: 10 })
     * 
     * // Only select the `styleId`
     * const styleWithStyleIdOnly = await prisma.style.findMany({ select: { styleId: true } })
     * 
     */
    findMany<T extends StyleFindManyArgs>(args?: SelectSubset<T, StyleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Style.
     * @param {StyleCreateArgs} args - Arguments to create a Style.
     * @example
     * // Create one Style
     * const Style = await prisma.style.create({
     *   data: {
     *     // ... data to create a Style
     *   }
     * })
     * 
     */
    create<T extends StyleCreateArgs>(args: SelectSubset<T, StyleCreateArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Styles.
     * @param {StyleCreateManyArgs} args - Arguments to create many Styles.
     * @example
     * // Create many Styles
     * const style = await prisma.style.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StyleCreateManyArgs>(args?: SelectSubset<T, StyleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Styles and returns the data saved in the database.
     * @param {StyleCreateManyAndReturnArgs} args - Arguments to create many Styles.
     * @example
     * // Create many Styles
     * const style = await prisma.style.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Styles and only return the `styleId`
     * const styleWithStyleIdOnly = await prisma.style.createManyAndReturn({
     *   select: { styleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StyleCreateManyAndReturnArgs>(args?: SelectSubset<T, StyleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Style.
     * @param {StyleDeleteArgs} args - Arguments to delete one Style.
     * @example
     * // Delete one Style
     * const Style = await prisma.style.delete({
     *   where: {
     *     // ... filter to delete one Style
     *   }
     * })
     * 
     */
    delete<T extends StyleDeleteArgs>(args: SelectSubset<T, StyleDeleteArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Style.
     * @param {StyleUpdateArgs} args - Arguments to update one Style.
     * @example
     * // Update one Style
     * const style = await prisma.style.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StyleUpdateArgs>(args: SelectSubset<T, StyleUpdateArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Styles.
     * @param {StyleDeleteManyArgs} args - Arguments to filter Styles to delete.
     * @example
     * // Delete a few Styles
     * const { count } = await prisma.style.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StyleDeleteManyArgs>(args?: SelectSubset<T, StyleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Styles
     * const style = await prisma.style.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StyleUpdateManyArgs>(args: SelectSubset<T, StyleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Styles and returns the data updated in the database.
     * @param {StyleUpdateManyAndReturnArgs} args - Arguments to update many Styles.
     * @example
     * // Update many Styles
     * const style = await prisma.style.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Styles and only return the `styleId`
     * const styleWithStyleIdOnly = await prisma.style.updateManyAndReturn({
     *   select: { styleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StyleUpdateManyAndReturnArgs>(args: SelectSubset<T, StyleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Style.
     * @param {StyleUpsertArgs} args - Arguments to update or create a Style.
     * @example
     * // Update or create a Style
     * const style = await prisma.style.upsert({
     *   create: {
     *     // ... data to create a Style
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Style we want to update
     *   }
     * })
     */
    upsert<T extends StyleUpsertArgs>(args: SelectSubset<T, StyleUpsertArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleCountArgs} args - Arguments to filter Styles to count.
     * @example
     * // Count the number of Styles
     * const count = await prisma.style.count({
     *   where: {
     *     // ... the filter for the Styles we want to count
     *   }
     * })
    **/
    count<T extends StyleCountArgs>(
      args?: Subset<T, StyleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleAggregateArgs>(args: Subset<T, StyleAggregateArgs>): Prisma.PrismaPromise<GetStyleAggregateType<T>>

    /**
     * Group by Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleGroupByArgs['orderBy'] }
        : { orderBy?: StyleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Style model
   */
  readonly fields: StyleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Style.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    curations<T extends Style$curationsArgs<ExtArgs> = {}>(args?: Subset<T, Style$curationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Style$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Style$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Style$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Style$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Style$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Style$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    styleTags<T extends Style$styleTagsArgs<ExtArgs> = {}>(args?: Subset<T, Style$styleTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Style model
   */
  interface StyleFieldRefs {
    readonly styleId: FieldRef<"Style", 'Int'>
    readonly nickname: FieldRef<"Style", 'String'>
    readonly title: FieldRef<"Style", 'String'>
    readonly content: FieldRef<"Style", 'String'>
    readonly password: FieldRef<"Style", 'String'>
    readonly curationCount: FieldRef<"Style", 'Int'>
    readonly viewCount: FieldRef<"Style", 'Int'>
    readonly createdAt: FieldRef<"Style", 'DateTime'>
    readonly updatedAt: FieldRef<"Style", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Style findUnique
   */
  export type StyleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findUniqueOrThrow
   */
  export type StyleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findFirst
   */
  export type StyleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findFirstOrThrow
   */
  export type StyleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findMany
   */
  export type StyleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Styles to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style create
   */
  export type StyleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to create a Style.
     */
    data: XOR<StyleCreateInput, StyleUncheckedCreateInput>
  }

  /**
   * Style createMany
   */
  export type StyleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Styles.
     */
    data: StyleCreateManyInput | StyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Style createManyAndReturn
   */
  export type StyleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * The data used to create many Styles.
     */
    data: StyleCreateManyInput | StyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Style update
   */
  export type StyleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to update a Style.
     */
    data: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
    /**
     * Choose, which Style to update.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style updateMany
   */
  export type StyleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Styles.
     */
    data: XOR<StyleUpdateManyMutationInput, StyleUncheckedUpdateManyInput>
    /**
     * Filter which Styles to update
     */
    where?: StyleWhereInput
    /**
     * Limit how many Styles to update.
     */
    limit?: number
  }

  /**
   * Style updateManyAndReturn
   */
  export type StyleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * The data used to update Styles.
     */
    data: XOR<StyleUpdateManyMutationInput, StyleUncheckedUpdateManyInput>
    /**
     * Filter which Styles to update
     */
    where?: StyleWhereInput
    /**
     * Limit how many Styles to update.
     */
    limit?: number
  }

  /**
   * Style upsert
   */
  export type StyleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The filter to search for the Style to update in case it exists.
     */
    where: StyleWhereUniqueInput
    /**
     * In case the Style found by the `where` argument doesn't exist, create a new Style with this data.
     */
    create: XOR<StyleCreateInput, StyleUncheckedCreateInput>
    /**
     * In case the Style was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
  }

  /**
   * Style delete
   */
  export type StyleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter which Style to delete.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style deleteMany
   */
  export type StyleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Styles to delete
     */
    where?: StyleWhereInput
    /**
     * Limit how many Styles to delete.
     */
    limit?: number
  }

  /**
   * Style.curations
   */
  export type Style$curationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    where?: CurationWhereInput
    orderBy?: CurationOrderByWithRelationInput | CurationOrderByWithRelationInput[]
    cursor?: CurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurationScalarFieldEnum | CurationScalarFieldEnum[]
  }

  /**
   * Style.categories
   */
  export type Style$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Style.comments
   */
  export type Style$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Style.images
   */
  export type Style$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Style.styleTags
   */
  export type Style$styleTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    where?: StyleTagWhereInput
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    cursor?: StyleTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StyleTagScalarFieldEnum | StyleTagScalarFieldEnum[]
  }

  /**
   * Style without action
   */
  export type StyleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Style
     */
    omit?: StyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
  }


  /**
   * Model Curation
   */

  export type AggregateCuration = {
    _count: CurationCountAggregateOutputType | null
    _avg: CurationAvgAggregateOutputType | null
    _sum: CurationSumAggregateOutputType | null
    _min: CurationMinAggregateOutputType | null
    _max: CurationMaxAggregateOutputType | null
  }

  export type CurationAvgAggregateOutputType = {
    curationId: number | null
    styleId: number | null
    trendy: number | null
    personality: number | null
    practicality: number | null
    costEffectiveness: number | null
  }

  export type CurationSumAggregateOutputType = {
    curationId: number | null
    styleId: number | null
    trendy: number | null
    personality: number | null
    practicality: number | null
    costEffectiveness: number | null
  }

  export type CurationMinAggregateOutputType = {
    curationId: number | null
    styleId: number | null
    nickname: string | null
    content: string | null
    password: string | null
    trendy: number | null
    personality: number | null
    practicality: number | null
    costEffectiveness: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurationMaxAggregateOutputType = {
    curationId: number | null
    styleId: number | null
    nickname: string | null
    content: string | null
    password: string | null
    trendy: number | null
    personality: number | null
    practicality: number | null
    costEffectiveness: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurationCountAggregateOutputType = {
    curationId: number
    styleId: number
    nickname: number
    content: number
    password: number
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CurationAvgAggregateInputType = {
    curationId?: true
    styleId?: true
    trendy?: true
    personality?: true
    practicality?: true
    costEffectiveness?: true
  }

  export type CurationSumAggregateInputType = {
    curationId?: true
    styleId?: true
    trendy?: true
    personality?: true
    practicality?: true
    costEffectiveness?: true
  }

  export type CurationMinAggregateInputType = {
    curationId?: true
    styleId?: true
    nickname?: true
    content?: true
    password?: true
    trendy?: true
    personality?: true
    practicality?: true
    costEffectiveness?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurationMaxAggregateInputType = {
    curationId?: true
    styleId?: true
    nickname?: true
    content?: true
    password?: true
    trendy?: true
    personality?: true
    practicality?: true
    costEffectiveness?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurationCountAggregateInputType = {
    curationId?: true
    styleId?: true
    nickname?: true
    content?: true
    password?: true
    trendy?: true
    personality?: true
    practicality?: true
    costEffectiveness?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curation to aggregate.
     */
    where?: CurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curations to fetch.
     */
    orderBy?: CurationOrderByWithRelationInput | CurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Curations
    **/
    _count?: true | CurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurationMaxAggregateInputType
  }

  export type GetCurationAggregateType<T extends CurationAggregateArgs> = {
        [P in keyof T & keyof AggregateCuration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCuration[P]>
      : GetScalarType<T[P], AggregateCuration[P]>
  }




  export type CurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurationWhereInput
    orderBy?: CurationOrderByWithAggregationInput | CurationOrderByWithAggregationInput[]
    by: CurationScalarFieldEnum[] | CurationScalarFieldEnum
    having?: CurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurationCountAggregateInputType | true
    _avg?: CurationAvgAggregateInputType
    _sum?: CurationSumAggregateInputType
    _min?: CurationMinAggregateInputType
    _max?: CurationMaxAggregateInputType
  }

  export type CurationGroupByOutputType = {
    curationId: number
    styleId: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt: Date
    updatedAt: Date
    _count: CurationCountAggregateOutputType | null
    _avg: CurationAvgAggregateOutputType | null
    _sum: CurationSumAggregateOutputType | null
    _min: CurationMinAggregateOutputType | null
    _max: CurationMaxAggregateOutputType | null
  }

  type GetCurationGroupByPayload<T extends CurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurationGroupByOutputType[P]>
            : GetScalarType<T[P], CurationGroupByOutputType[P]>
        }
      >
    >


  export type CurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    curationId?: boolean
    styleId?: boolean
    nickname?: boolean
    content?: boolean
    password?: boolean
    trendy?: boolean
    personality?: boolean
    practicality?: boolean
    costEffectiveness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
    comments?: boolean | Curation$commentsArgs<ExtArgs>
    _count?: boolean | CurationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curation"]>

  export type CurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    curationId?: boolean
    styleId?: boolean
    nickname?: boolean
    content?: boolean
    password?: boolean
    trendy?: boolean
    personality?: boolean
    practicality?: boolean
    costEffectiveness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curation"]>

  export type CurationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    curationId?: boolean
    styleId?: boolean
    nickname?: boolean
    content?: boolean
    password?: boolean
    trendy?: boolean
    personality?: boolean
    practicality?: boolean
    costEffectiveness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curation"]>

  export type CurationSelectScalar = {
    curationId?: boolean
    styleId?: boolean
    nickname?: boolean
    content?: boolean
    password?: boolean
    trendy?: boolean
    personality?: boolean
    practicality?: boolean
    costEffectiveness?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CurationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"curationId" | "styleId" | "nickname" | "content" | "password" | "trendy" | "personality" | "practicality" | "costEffectiveness" | "createdAt" | "updatedAt", ExtArgs["result"]["curation"]>
  export type CurationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
    comments?: boolean | Curation$commentsArgs<ExtArgs>
    _count?: boolean | CurationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CurationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type CurationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $CurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Curation"
    objects: {
      style: Prisma.$StylePayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      curationId: number
      styleId: number
      nickname: string
      content: string
      password: string
      trendy: number
      personality: number
      practicality: number
      costEffectiveness: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["curation"]>
    composites: {}
  }

  type CurationGetPayload<S extends boolean | null | undefined | CurationDefaultArgs> = $Result.GetResult<Prisma.$CurationPayload, S>

  type CurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurationCountAggregateInputType | true
    }

  export interface CurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curation'], meta: { name: 'Curation' } }
    /**
     * Find zero or one Curation that matches the filter.
     * @param {CurationFindUniqueArgs} args - Arguments to find a Curation
     * @example
     * // Get one Curation
     * const curation = await prisma.curation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurationFindUniqueArgs>(args: SelectSubset<T, CurationFindUniqueArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Curation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurationFindUniqueOrThrowArgs} args - Arguments to find a Curation
     * @example
     * // Get one Curation
     * const curation = await prisma.curation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurationFindUniqueOrThrowArgs>(args: SelectSubset<T, CurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Curation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationFindFirstArgs} args - Arguments to find a Curation
     * @example
     * // Get one Curation
     * const curation = await prisma.curation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurationFindFirstArgs>(args?: SelectSubset<T, CurationFindFirstArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Curation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationFindFirstOrThrowArgs} args - Arguments to find a Curation
     * @example
     * // Get one Curation
     * const curation = await prisma.curation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurationFindFirstOrThrowArgs>(args?: SelectSubset<T, CurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Curations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Curations
     * const curations = await prisma.curation.findMany()
     * 
     * // Get first 10 Curations
     * const curations = await prisma.curation.findMany({ take: 10 })
     * 
     * // Only select the `curationId`
     * const curationWithCurationIdOnly = await prisma.curation.findMany({ select: { curationId: true } })
     * 
     */
    findMany<T extends CurationFindManyArgs>(args?: SelectSubset<T, CurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Curation.
     * @param {CurationCreateArgs} args - Arguments to create a Curation.
     * @example
     * // Create one Curation
     * const Curation = await prisma.curation.create({
     *   data: {
     *     // ... data to create a Curation
     *   }
     * })
     * 
     */
    create<T extends CurationCreateArgs>(args: SelectSubset<T, CurationCreateArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Curations.
     * @param {CurationCreateManyArgs} args - Arguments to create many Curations.
     * @example
     * // Create many Curations
     * const curation = await prisma.curation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurationCreateManyArgs>(args?: SelectSubset<T, CurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Curations and returns the data saved in the database.
     * @param {CurationCreateManyAndReturnArgs} args - Arguments to create many Curations.
     * @example
     * // Create many Curations
     * const curation = await prisma.curation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Curations and only return the `curationId`
     * const curationWithCurationIdOnly = await prisma.curation.createManyAndReturn({
     *   select: { curationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurationCreateManyAndReturnArgs>(args?: SelectSubset<T, CurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Curation.
     * @param {CurationDeleteArgs} args - Arguments to delete one Curation.
     * @example
     * // Delete one Curation
     * const Curation = await prisma.curation.delete({
     *   where: {
     *     // ... filter to delete one Curation
     *   }
     * })
     * 
     */
    delete<T extends CurationDeleteArgs>(args: SelectSubset<T, CurationDeleteArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Curation.
     * @param {CurationUpdateArgs} args - Arguments to update one Curation.
     * @example
     * // Update one Curation
     * const curation = await prisma.curation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurationUpdateArgs>(args: SelectSubset<T, CurationUpdateArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Curations.
     * @param {CurationDeleteManyArgs} args - Arguments to filter Curations to delete.
     * @example
     * // Delete a few Curations
     * const { count } = await prisma.curation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurationDeleteManyArgs>(args?: SelectSubset<T, CurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Curations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Curations
     * const curation = await prisma.curation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurationUpdateManyArgs>(args: SelectSubset<T, CurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Curations and returns the data updated in the database.
     * @param {CurationUpdateManyAndReturnArgs} args - Arguments to update many Curations.
     * @example
     * // Update many Curations
     * const curation = await prisma.curation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Curations and only return the `curationId`
     * const curationWithCurationIdOnly = await prisma.curation.updateManyAndReturn({
     *   select: { curationId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurationUpdateManyAndReturnArgs>(args: SelectSubset<T, CurationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Curation.
     * @param {CurationUpsertArgs} args - Arguments to update or create a Curation.
     * @example
     * // Update or create a Curation
     * const curation = await prisma.curation.upsert({
     *   create: {
     *     // ... data to create a Curation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curation we want to update
     *   }
     * })
     */
    upsert<T extends CurationUpsertArgs>(args: SelectSubset<T, CurationUpsertArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Curations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationCountArgs} args - Arguments to filter Curations to count.
     * @example
     * // Count the number of Curations
     * const count = await prisma.curation.count({
     *   where: {
     *     // ... the filter for the Curations we want to count
     *   }
     * })
    **/
    count<T extends CurationCountArgs>(
      args?: Subset<T, CurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurationAggregateArgs>(args: Subset<T, CurationAggregateArgs>): Prisma.PrismaPromise<GetCurationAggregateType<T>>

    /**
     * Group by Curation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurationGroupByArgs['orderBy'] }
        : { orderBy?: CurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curation model
   */
  readonly fields: CurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends Curation$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Curation$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Curation model
   */
  interface CurationFieldRefs {
    readonly curationId: FieldRef<"Curation", 'Int'>
    readonly styleId: FieldRef<"Curation", 'Int'>
    readonly nickname: FieldRef<"Curation", 'String'>
    readonly content: FieldRef<"Curation", 'String'>
    readonly password: FieldRef<"Curation", 'String'>
    readonly trendy: FieldRef<"Curation", 'Int'>
    readonly personality: FieldRef<"Curation", 'Int'>
    readonly practicality: FieldRef<"Curation", 'Int'>
    readonly costEffectiveness: FieldRef<"Curation", 'Int'>
    readonly createdAt: FieldRef<"Curation", 'DateTime'>
    readonly updatedAt: FieldRef<"Curation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Curation findUnique
   */
  export type CurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter, which Curation to fetch.
     */
    where: CurationWhereUniqueInput
  }

  /**
   * Curation findUniqueOrThrow
   */
  export type CurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter, which Curation to fetch.
     */
    where: CurationWhereUniqueInput
  }

  /**
   * Curation findFirst
   */
  export type CurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter, which Curation to fetch.
     */
    where?: CurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curations to fetch.
     */
    orderBy?: CurationOrderByWithRelationInput | CurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curations.
     */
    cursor?: CurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curations.
     */
    distinct?: CurationScalarFieldEnum | CurationScalarFieldEnum[]
  }

  /**
   * Curation findFirstOrThrow
   */
  export type CurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter, which Curation to fetch.
     */
    where?: CurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curations to fetch.
     */
    orderBy?: CurationOrderByWithRelationInput | CurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curations.
     */
    cursor?: CurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curations.
     */
    distinct?: CurationScalarFieldEnum | CurationScalarFieldEnum[]
  }

  /**
   * Curation findMany
   */
  export type CurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter, which Curations to fetch.
     */
    where?: CurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curations to fetch.
     */
    orderBy?: CurationOrderByWithRelationInput | CurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Curations.
     */
    cursor?: CurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curations.
     */
    skip?: number
    distinct?: CurationScalarFieldEnum | CurationScalarFieldEnum[]
  }

  /**
   * Curation create
   */
  export type CurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * The data needed to create a Curation.
     */
    data: XOR<CurationCreateInput, CurationUncheckedCreateInput>
  }

  /**
   * Curation createMany
   */
  export type CurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Curations.
     */
    data: CurationCreateManyInput | CurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Curation createManyAndReturn
   */
  export type CurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * The data used to create many Curations.
     */
    data: CurationCreateManyInput | CurationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Curation update
   */
  export type CurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * The data needed to update a Curation.
     */
    data: XOR<CurationUpdateInput, CurationUncheckedUpdateInput>
    /**
     * Choose, which Curation to update.
     */
    where: CurationWhereUniqueInput
  }

  /**
   * Curation updateMany
   */
  export type CurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Curations.
     */
    data: XOR<CurationUpdateManyMutationInput, CurationUncheckedUpdateManyInput>
    /**
     * Filter which Curations to update
     */
    where?: CurationWhereInput
    /**
     * Limit how many Curations to update.
     */
    limit?: number
  }

  /**
   * Curation updateManyAndReturn
   */
  export type CurationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * The data used to update Curations.
     */
    data: XOR<CurationUpdateManyMutationInput, CurationUncheckedUpdateManyInput>
    /**
     * Filter which Curations to update
     */
    where?: CurationWhereInput
    /**
     * Limit how many Curations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Curation upsert
   */
  export type CurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * The filter to search for the Curation to update in case it exists.
     */
    where: CurationWhereUniqueInput
    /**
     * In case the Curation found by the `where` argument doesn't exist, create a new Curation with this data.
     */
    create: XOR<CurationCreateInput, CurationUncheckedCreateInput>
    /**
     * In case the Curation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurationUpdateInput, CurationUncheckedUpdateInput>
  }

  /**
   * Curation delete
   */
  export type CurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
    /**
     * Filter which Curation to delete.
     */
    where: CurationWhereUniqueInput
  }

  /**
   * Curation deleteMany
   */
  export type CurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curations to delete
     */
    where?: CurationWhereInput
    /**
     * Limit how many Curations to delete.
     */
    limit?: number
  }

  /**
   * Curation.comments
   */
  export type Curation$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Curation without action
   */
  export type CurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curation
     */
    select?: CurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Curation
     */
    omit?: CurationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurationInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    commentId: number | null
    curationId: number | null
    styleId: number | null
  }

  export type CommentSumAggregateOutputType = {
    commentId: number | null
    curationId: number | null
    styleId: number | null
  }

  export type CommentMinAggregateOutputType = {
    commentId: number | null
    curationId: number | null
    styleId: number | null
    content: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    commentId: number | null
    curationId: number | null
    styleId: number | null
    content: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    commentId: number
    curationId: number
    styleId: number
    content: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    commentId?: true
    curationId?: true
    styleId?: true
  }

  export type CommentSumAggregateInputType = {
    commentId?: true
    curationId?: true
    styleId?: true
  }

  export type CommentMinAggregateInputType = {
    commentId?: true
    curationId?: true
    styleId?: true
    content?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    commentId?: true
    curationId?: true
    styleId?: true
    content?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    commentId?: true
    curationId?: true
    styleId?: true
    content?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    commentId: number
    curationId: number
    styleId: number
    content: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    commentId?: boolean
    curationId?: boolean
    styleId?: boolean
    content?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    commentId?: boolean
    curationId?: boolean
    styleId?: boolean
    content?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    commentId?: boolean
    curationId?: boolean
    styleId?: boolean
    content?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    commentId?: boolean
    curationId?: boolean
    styleId?: boolean
    content?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"commentId" | "curationId" | "styleId" | "content" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    curation?: boolean | CurationDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      curation: Prisma.$CurationPayload<ExtArgs>
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      commentId: number
      curationId: number
      styleId: number
      content: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `commentId`
     * const commentWithCommentIdOnly = await prisma.comment.findMany({ select: { commentId: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `commentId`
     * const commentWithCommentIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { commentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `commentId`
     * const commentWithCommentIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { commentId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    curation<T extends CurationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurationDefaultArgs<ExtArgs>>): Prisma__CurationClient<$Result.GetResult<Prisma.$CurationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly commentId: FieldRef<"Comment", 'Int'>
    readonly curationId: FieldRef<"Comment", 'Int'>
    readonly styleId: FieldRef<"Comment", 'Int'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly password: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    categoryId: number | null
    styleId: number | null
    price: number | null
  }

  export type CategorySumAggregateOutputType = {
    categoryId: number | null
    styleId: number | null
    price: bigint | null
  }

  export type CategoryMinAggregateOutputType = {
    categoryId: number | null
    styleId: number | null
    type: $Enums.CategoryType | null
    name: string | null
    brand: string | null
    price: bigint | null
  }

  export type CategoryMaxAggregateOutputType = {
    categoryId: number | null
    styleId: number | null
    type: $Enums.CategoryType | null
    name: string | null
    brand: string | null
    price: bigint | null
  }

  export type CategoryCountAggregateOutputType = {
    categoryId: number
    styleId: number
    type: number
    name: number
    brand: number
    price: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    categoryId?: true
    styleId?: true
    price?: true
  }

  export type CategorySumAggregateInputType = {
    categoryId?: true
    styleId?: true
    price?: true
  }

  export type CategoryMinAggregateInputType = {
    categoryId?: true
    styleId?: true
    type?: true
    name?: true
    brand?: true
    price?: true
  }

  export type CategoryMaxAggregateInputType = {
    categoryId?: true
    styleId?: true
    type?: true
    name?: true
    brand?: true
    price?: true
  }

  export type CategoryCountAggregateInputType = {
    categoryId?: true
    styleId?: true
    type?: true
    name?: true
    brand?: true
    price?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    categoryId: number
    styleId: number
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    styleId?: boolean
    type?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    styleId?: boolean
    type?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    styleId?: boolean
    type?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    categoryId?: boolean
    styleId?: boolean
    type?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"categoryId" | "styleId" | "type" | "name" | "brand" | "price", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      categoryId: number
      styleId: number
      type: $Enums.CategoryType
      name: string
      brand: string
      price: bigint
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.findMany({ select: { categoryId: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.createManyAndReturn({
     *   select: { categoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { categoryId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly categoryId: FieldRef<"Category", 'Int'>
    readonly styleId: FieldRef<"Category", 'Int'>
    readonly type: FieldRef<"Category", 'CategoryType'>
    readonly name: FieldRef<"Category", 'String'>
    readonly brand: FieldRef<"Category", 'String'>
    readonly price: FieldRef<"Category", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    imageId: number | null
    styleId: number | null
  }

  export type ImageSumAggregateOutputType = {
    imageId: number | null
    styleId: number | null
  }

  export type ImageMinAggregateOutputType = {
    imageId: number | null
    styleId: number | null
    imageUrl: string | null
  }

  export type ImageMaxAggregateOutputType = {
    imageId: number | null
    styleId: number | null
    imageUrl: string | null
  }

  export type ImageCountAggregateOutputType = {
    imageId: number
    styleId: number
    imageUrl: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    imageId?: true
    styleId?: true
  }

  export type ImageSumAggregateInputType = {
    imageId?: true
    styleId?: true
  }

  export type ImageMinAggregateInputType = {
    imageId?: true
    styleId?: true
    imageUrl?: true
  }

  export type ImageMaxAggregateInputType = {
    imageId?: true
    styleId?: true
    imageUrl?: true
  }

  export type ImageCountAggregateInputType = {
    imageId?: true
    styleId?: true
    imageUrl?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    imageId: number
    styleId: number
    imageUrl: string
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imageId?: boolean
    styleId?: boolean
    imageUrl?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imageId?: boolean
    styleId?: boolean
    imageUrl?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imageId?: boolean
    styleId?: boolean
    imageUrl?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    imageId?: boolean
    styleId?: boolean
    imageUrl?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"imageId" | "styleId" | "imageUrl", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      imageId: number
      styleId: number
      imageUrl: string
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `imageId`
     * const imageWithImageIdOnly = await prisma.image.findMany({ select: { imageId: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `imageId`
     * const imageWithImageIdOnly = await prisma.image.createManyAndReturn({
     *   select: { imageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `imageId`
     * const imageWithImageIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { imageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly imageId: FieldRef<"Image", 'Int'>
    readonly styleId: FieldRef<"Image", 'Int'>
    readonly imageUrl: FieldRef<"Image", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    tagId: number | null
  }

  export type TagSumAggregateOutputType = {
    tagId: number | null
  }

  export type TagMinAggregateOutputType = {
    tagId: number | null
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    tagId: number | null
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    tagId: number
    name: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    tagId?: true
  }

  export type TagSumAggregateInputType = {
    tagId?: true
  }

  export type TagMinAggregateInputType = {
    tagId?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    tagId?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    tagId?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    tagId: number
    name: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    name?: boolean
    styleTags?: boolean | Tag$styleTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    name?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagId?: boolean
    name?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    tagId?: boolean
    name?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tagId" | "name", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    styleTags?: boolean | Tag$styleTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      styleTags: Prisma.$StyleTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      tagId: number
      name: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `tagId`
     * const tagWithTagIdOnly = await prisma.tag.findMany({ select: { tagId: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `tagId`
     * const tagWithTagIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { tagId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `tagId`
     * const tagWithTagIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { tagId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    styleTags<T extends Tag$styleTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$styleTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly tagId: FieldRef<"Tag", 'Int'>
    readonly name: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.styleTags
   */
  export type Tag$styleTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    where?: StyleTagWhereInput
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    cursor?: StyleTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StyleTagScalarFieldEnum | StyleTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model StyleTag
   */

  export type AggregateStyleTag = {
    _count: StyleTagCountAggregateOutputType | null
    _avg: StyleTagAvgAggregateOutputType | null
    _sum: StyleTagSumAggregateOutputType | null
    _min: StyleTagMinAggregateOutputType | null
    _max: StyleTagMaxAggregateOutputType | null
  }

  export type StyleTagAvgAggregateOutputType = {
    styleId: number | null
    tagId: number | null
  }

  export type StyleTagSumAggregateOutputType = {
    styleId: number | null
    tagId: number | null
  }

  export type StyleTagMinAggregateOutputType = {
    styleId: number | null
    tagId: number | null
  }

  export type StyleTagMaxAggregateOutputType = {
    styleId: number | null
    tagId: number | null
  }

  export type StyleTagCountAggregateOutputType = {
    styleId: number
    tagId: number
    _all: number
  }


  export type StyleTagAvgAggregateInputType = {
    styleId?: true
    tagId?: true
  }

  export type StyleTagSumAggregateInputType = {
    styleId?: true
    tagId?: true
  }

  export type StyleTagMinAggregateInputType = {
    styleId?: true
    tagId?: true
  }

  export type StyleTagMaxAggregateInputType = {
    styleId?: true
    tagId?: true
  }

  export type StyleTagCountAggregateInputType = {
    styleId?: true
    tagId?: true
    _all?: true
  }

  export type StyleTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleTag to aggregate.
     */
    where?: StyleTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleTags to fetch.
     */
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StyleTags
    **/
    _count?: true | StyleTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StyleTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StyleTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleTagMaxAggregateInputType
  }

  export type GetStyleTagAggregateType<T extends StyleTagAggregateArgs> = {
        [P in keyof T & keyof AggregateStyleTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyleTag[P]>
      : GetScalarType<T[P], AggregateStyleTag[P]>
  }




  export type StyleTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleTagWhereInput
    orderBy?: StyleTagOrderByWithAggregationInput | StyleTagOrderByWithAggregationInput[]
    by: StyleTagScalarFieldEnum[] | StyleTagScalarFieldEnum
    having?: StyleTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleTagCountAggregateInputType | true
    _avg?: StyleTagAvgAggregateInputType
    _sum?: StyleTagSumAggregateInputType
    _min?: StyleTagMinAggregateInputType
    _max?: StyleTagMaxAggregateInputType
  }

  export type StyleTagGroupByOutputType = {
    styleId: number
    tagId: number
    _count: StyleTagCountAggregateOutputType | null
    _avg: StyleTagAvgAggregateOutputType | null
    _sum: StyleTagSumAggregateOutputType | null
    _min: StyleTagMinAggregateOutputType | null
    _max: StyleTagMaxAggregateOutputType | null
  }

  type GetStyleTagGroupByPayload<T extends StyleTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleTagGroupByOutputType[P]>
            : GetScalarType<T[P], StyleTagGroupByOutputType[P]>
        }
      >
    >


  export type StyleTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    tagId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleTag"]>

  export type StyleTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    tagId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleTag"]>

  export type StyleTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    styleId?: boolean
    tagId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleTag"]>

  export type StyleTagSelectScalar = {
    styleId?: boolean
    tagId?: boolean
  }

  export type StyleTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"styleId" | "tagId", ExtArgs["result"]["styleTag"]>
  export type StyleTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type StyleTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type StyleTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $StyleTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StyleTag"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      styleId: number
      tagId: number
    }, ExtArgs["result"]["styleTag"]>
    composites: {}
  }

  type StyleTagGetPayload<S extends boolean | null | undefined | StyleTagDefaultArgs> = $Result.GetResult<Prisma.$StyleTagPayload, S>

  type StyleTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StyleTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StyleTagCountAggregateInputType | true
    }

  export interface StyleTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StyleTag'], meta: { name: 'StyleTag' } }
    /**
     * Find zero or one StyleTag that matches the filter.
     * @param {StyleTagFindUniqueArgs} args - Arguments to find a StyleTag
     * @example
     * // Get one StyleTag
     * const styleTag = await prisma.styleTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StyleTagFindUniqueArgs>(args: SelectSubset<T, StyleTagFindUniqueArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StyleTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StyleTagFindUniqueOrThrowArgs} args - Arguments to find a StyleTag
     * @example
     * // Get one StyleTag
     * const styleTag = await prisma.styleTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StyleTagFindUniqueOrThrowArgs>(args: SelectSubset<T, StyleTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StyleTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagFindFirstArgs} args - Arguments to find a StyleTag
     * @example
     * // Get one StyleTag
     * const styleTag = await prisma.styleTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StyleTagFindFirstArgs>(args?: SelectSubset<T, StyleTagFindFirstArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StyleTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagFindFirstOrThrowArgs} args - Arguments to find a StyleTag
     * @example
     * // Get one StyleTag
     * const styleTag = await prisma.styleTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StyleTagFindFirstOrThrowArgs>(args?: SelectSubset<T, StyleTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StyleTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StyleTags
     * const styleTags = await prisma.styleTag.findMany()
     * 
     * // Get first 10 StyleTags
     * const styleTags = await prisma.styleTag.findMany({ take: 10 })
     * 
     * // Only select the `styleId`
     * const styleTagWithStyleIdOnly = await prisma.styleTag.findMany({ select: { styleId: true } })
     * 
     */
    findMany<T extends StyleTagFindManyArgs>(args?: SelectSubset<T, StyleTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StyleTag.
     * @param {StyleTagCreateArgs} args - Arguments to create a StyleTag.
     * @example
     * // Create one StyleTag
     * const StyleTag = await prisma.styleTag.create({
     *   data: {
     *     // ... data to create a StyleTag
     *   }
     * })
     * 
     */
    create<T extends StyleTagCreateArgs>(args: SelectSubset<T, StyleTagCreateArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StyleTags.
     * @param {StyleTagCreateManyArgs} args - Arguments to create many StyleTags.
     * @example
     * // Create many StyleTags
     * const styleTag = await prisma.styleTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StyleTagCreateManyArgs>(args?: SelectSubset<T, StyleTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StyleTags and returns the data saved in the database.
     * @param {StyleTagCreateManyAndReturnArgs} args - Arguments to create many StyleTags.
     * @example
     * // Create many StyleTags
     * const styleTag = await prisma.styleTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StyleTags and only return the `styleId`
     * const styleTagWithStyleIdOnly = await prisma.styleTag.createManyAndReturn({
     *   select: { styleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StyleTagCreateManyAndReturnArgs>(args?: SelectSubset<T, StyleTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StyleTag.
     * @param {StyleTagDeleteArgs} args - Arguments to delete one StyleTag.
     * @example
     * // Delete one StyleTag
     * const StyleTag = await prisma.styleTag.delete({
     *   where: {
     *     // ... filter to delete one StyleTag
     *   }
     * })
     * 
     */
    delete<T extends StyleTagDeleteArgs>(args: SelectSubset<T, StyleTagDeleteArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StyleTag.
     * @param {StyleTagUpdateArgs} args - Arguments to update one StyleTag.
     * @example
     * // Update one StyleTag
     * const styleTag = await prisma.styleTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StyleTagUpdateArgs>(args: SelectSubset<T, StyleTagUpdateArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StyleTags.
     * @param {StyleTagDeleteManyArgs} args - Arguments to filter StyleTags to delete.
     * @example
     * // Delete a few StyleTags
     * const { count } = await prisma.styleTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StyleTagDeleteManyArgs>(args?: SelectSubset<T, StyleTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StyleTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StyleTags
     * const styleTag = await prisma.styleTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StyleTagUpdateManyArgs>(args: SelectSubset<T, StyleTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StyleTags and returns the data updated in the database.
     * @param {StyleTagUpdateManyAndReturnArgs} args - Arguments to update many StyleTags.
     * @example
     * // Update many StyleTags
     * const styleTag = await prisma.styleTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StyleTags and only return the `styleId`
     * const styleTagWithStyleIdOnly = await prisma.styleTag.updateManyAndReturn({
     *   select: { styleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StyleTagUpdateManyAndReturnArgs>(args: SelectSubset<T, StyleTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StyleTag.
     * @param {StyleTagUpsertArgs} args - Arguments to update or create a StyleTag.
     * @example
     * // Update or create a StyleTag
     * const styleTag = await prisma.styleTag.upsert({
     *   create: {
     *     // ... data to create a StyleTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StyleTag we want to update
     *   }
     * })
     */
    upsert<T extends StyleTagUpsertArgs>(args: SelectSubset<T, StyleTagUpsertArgs<ExtArgs>>): Prisma__StyleTagClient<$Result.GetResult<Prisma.$StyleTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StyleTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagCountArgs} args - Arguments to filter StyleTags to count.
     * @example
     * // Count the number of StyleTags
     * const count = await prisma.styleTag.count({
     *   where: {
     *     // ... the filter for the StyleTags we want to count
     *   }
     * })
    **/
    count<T extends StyleTagCountArgs>(
      args?: Subset<T, StyleTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StyleTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleTagAggregateArgs>(args: Subset<T, StyleTagAggregateArgs>): Prisma.PrismaPromise<GetStyleTagAggregateType<T>>

    /**
     * Group by StyleTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleTagGroupByArgs['orderBy'] }
        : { orderBy?: StyleTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StyleTag model
   */
  readonly fields: StyleTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StyleTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StyleTag model
   */
  interface StyleTagFieldRefs {
    readonly styleId: FieldRef<"StyleTag", 'Int'>
    readonly tagId: FieldRef<"StyleTag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StyleTag findUnique
   */
  export type StyleTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter, which StyleTag to fetch.
     */
    where: StyleTagWhereUniqueInput
  }

  /**
   * StyleTag findUniqueOrThrow
   */
  export type StyleTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter, which StyleTag to fetch.
     */
    where: StyleTagWhereUniqueInput
  }

  /**
   * StyleTag findFirst
   */
  export type StyleTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter, which StyleTag to fetch.
     */
    where?: StyleTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleTags to fetch.
     */
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleTags.
     */
    cursor?: StyleTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleTags.
     */
    distinct?: StyleTagScalarFieldEnum | StyleTagScalarFieldEnum[]
  }

  /**
   * StyleTag findFirstOrThrow
   */
  export type StyleTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter, which StyleTag to fetch.
     */
    where?: StyleTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleTags to fetch.
     */
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleTags.
     */
    cursor?: StyleTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleTags.
     */
    distinct?: StyleTagScalarFieldEnum | StyleTagScalarFieldEnum[]
  }

  /**
   * StyleTag findMany
   */
  export type StyleTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter, which StyleTags to fetch.
     */
    where?: StyleTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleTags to fetch.
     */
    orderBy?: StyleTagOrderByWithRelationInput | StyleTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StyleTags.
     */
    cursor?: StyleTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleTags.
     */
    skip?: number
    distinct?: StyleTagScalarFieldEnum | StyleTagScalarFieldEnum[]
  }

  /**
   * StyleTag create
   */
  export type StyleTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * The data needed to create a StyleTag.
     */
    data: XOR<StyleTagCreateInput, StyleTagUncheckedCreateInput>
  }

  /**
   * StyleTag createMany
   */
  export type StyleTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StyleTags.
     */
    data: StyleTagCreateManyInput | StyleTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StyleTag createManyAndReturn
   */
  export type StyleTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * The data used to create many StyleTags.
     */
    data: StyleTagCreateManyInput | StyleTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StyleTag update
   */
  export type StyleTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * The data needed to update a StyleTag.
     */
    data: XOR<StyleTagUpdateInput, StyleTagUncheckedUpdateInput>
    /**
     * Choose, which StyleTag to update.
     */
    where: StyleTagWhereUniqueInput
  }

  /**
   * StyleTag updateMany
   */
  export type StyleTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StyleTags.
     */
    data: XOR<StyleTagUpdateManyMutationInput, StyleTagUncheckedUpdateManyInput>
    /**
     * Filter which StyleTags to update
     */
    where?: StyleTagWhereInput
    /**
     * Limit how many StyleTags to update.
     */
    limit?: number
  }

  /**
   * StyleTag updateManyAndReturn
   */
  export type StyleTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * The data used to update StyleTags.
     */
    data: XOR<StyleTagUpdateManyMutationInput, StyleTagUncheckedUpdateManyInput>
    /**
     * Filter which StyleTags to update
     */
    where?: StyleTagWhereInput
    /**
     * Limit how many StyleTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StyleTag upsert
   */
  export type StyleTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * The filter to search for the StyleTag to update in case it exists.
     */
    where: StyleTagWhereUniqueInput
    /**
     * In case the StyleTag found by the `where` argument doesn't exist, create a new StyleTag with this data.
     */
    create: XOR<StyleTagCreateInput, StyleTagUncheckedCreateInput>
    /**
     * In case the StyleTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleTagUpdateInput, StyleTagUncheckedUpdateInput>
  }

  /**
   * StyleTag delete
   */
  export type StyleTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
    /**
     * Filter which StyleTag to delete.
     */
    where: StyleTagWhereUniqueInput
  }

  /**
   * StyleTag deleteMany
   */
  export type StyleTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleTags to delete
     */
    where?: StyleTagWhereInput
    /**
     * Limit how many StyleTags to delete.
     */
    limit?: number
  }

  /**
   * StyleTag without action
   */
  export type StyleTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleTag
     */
    select?: StyleTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StyleTag
     */
    omit?: StyleTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleTagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StyleScalarFieldEnum: {
    styleId: 'styleId',
    nickname: 'nickname',
    title: 'title',
    content: 'content',
    password: 'password',
    curationCount: 'curationCount',
    viewCount: 'viewCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StyleScalarFieldEnum = (typeof StyleScalarFieldEnum)[keyof typeof StyleScalarFieldEnum]


  export const CurationScalarFieldEnum: {
    curationId: 'curationId',
    styleId: 'styleId',
    nickname: 'nickname',
    content: 'content',
    password: 'password',
    trendy: 'trendy',
    personality: 'personality',
    practicality: 'practicality',
    costEffectiveness: 'costEffectiveness',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CurationScalarFieldEnum = (typeof CurationScalarFieldEnum)[keyof typeof CurationScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    commentId: 'commentId',
    curationId: 'curationId',
    styleId: 'styleId',
    content: 'content',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    categoryId: 'categoryId',
    styleId: 'styleId',
    type: 'type',
    name: 'name',
    brand: 'brand',
    price: 'price'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    imageId: 'imageId',
    styleId: 'styleId',
    imageUrl: 'imageUrl'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const TagScalarFieldEnum: {
    tagId: 'tagId',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const StyleTagScalarFieldEnum: {
    styleId: 'styleId',
    tagId: 'tagId'
  };

  export type StyleTagScalarFieldEnum = (typeof StyleTagScalarFieldEnum)[keyof typeof StyleTagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CategoryType'
   */
  export type EnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType'>
    


  /**
   * Reference to a field of type 'CategoryType[]'
   */
  export type ListEnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StyleWhereInput = {
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    styleId?: IntFilter<"Style"> | number
    nickname?: StringFilter<"Style"> | string
    title?: StringFilter<"Style"> | string
    content?: StringFilter<"Style"> | string
    password?: StringFilter<"Style"> | string
    curationCount?: IntFilter<"Style"> | number
    viewCount?: IntFilter<"Style"> | number
    createdAt?: DateTimeFilter<"Style"> | Date | string
    updatedAt?: DateTimeFilter<"Style"> | Date | string
    curations?: CurationListRelationFilter
    categories?: CategoryListRelationFilter
    comments?: CommentListRelationFilter
    images?: ImageListRelationFilter
    styleTags?: StyleTagListRelationFilter
  }

  export type StyleOrderByWithRelationInput = {
    styleId?: SortOrder
    nickname?: SortOrder
    title?: SortOrder
    content?: SortOrder
    password?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    curations?: CurationOrderByRelationAggregateInput
    categories?: CategoryOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
    styleTags?: StyleTagOrderByRelationAggregateInput
  }

  export type StyleWhereUniqueInput = Prisma.AtLeast<{
    styleId?: number
    nickname?: string
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    title?: StringFilter<"Style"> | string
    content?: StringFilter<"Style"> | string
    password?: StringFilter<"Style"> | string
    curationCount?: IntFilter<"Style"> | number
    viewCount?: IntFilter<"Style"> | number
    createdAt?: DateTimeFilter<"Style"> | Date | string
    updatedAt?: DateTimeFilter<"Style"> | Date | string
    curations?: CurationListRelationFilter
    categories?: CategoryListRelationFilter
    comments?: CommentListRelationFilter
    images?: ImageListRelationFilter
    styleTags?: StyleTagListRelationFilter
  }, "styleId" | "nickname">

  export type StyleOrderByWithAggregationInput = {
    styleId?: SortOrder
    nickname?: SortOrder
    title?: SortOrder
    content?: SortOrder
    password?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StyleCountOrderByAggregateInput
    _avg?: StyleAvgOrderByAggregateInput
    _max?: StyleMaxOrderByAggregateInput
    _min?: StyleMinOrderByAggregateInput
    _sum?: StyleSumOrderByAggregateInput
  }

  export type StyleScalarWhereWithAggregatesInput = {
    AND?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    OR?: StyleScalarWhereWithAggregatesInput[]
    NOT?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    styleId?: IntWithAggregatesFilter<"Style"> | number
    nickname?: StringWithAggregatesFilter<"Style"> | string
    title?: StringWithAggregatesFilter<"Style"> | string
    content?: StringWithAggregatesFilter<"Style"> | string
    password?: StringWithAggregatesFilter<"Style"> | string
    curationCount?: IntWithAggregatesFilter<"Style"> | number
    viewCount?: IntWithAggregatesFilter<"Style"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Style"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Style"> | Date | string
  }

  export type CurationWhereInput = {
    AND?: CurationWhereInput | CurationWhereInput[]
    OR?: CurationWhereInput[]
    NOT?: CurationWhereInput | CurationWhereInput[]
    curationId?: IntFilter<"Curation"> | number
    styleId?: IntFilter<"Curation"> | number
    nickname?: StringFilter<"Curation"> | string
    content?: StringFilter<"Curation"> | string
    password?: StringFilter<"Curation"> | string
    trendy?: IntFilter<"Curation"> | number
    personality?: IntFilter<"Curation"> | number
    practicality?: IntFilter<"Curation"> | number
    costEffectiveness?: IntFilter<"Curation"> | number
    createdAt?: DateTimeFilter<"Curation"> | Date | string
    updatedAt?: DateTimeFilter<"Curation"> | Date | string
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
    comments?: CommentListRelationFilter
  }

  export type CurationOrderByWithRelationInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    nickname?: SortOrder
    content?: SortOrder
    password?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    style?: StyleOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type CurationWhereUniqueInput = Prisma.AtLeast<{
    curationId?: number
    AND?: CurationWhereInput | CurationWhereInput[]
    OR?: CurationWhereInput[]
    NOT?: CurationWhereInput | CurationWhereInput[]
    styleId?: IntFilter<"Curation"> | number
    nickname?: StringFilter<"Curation"> | string
    content?: StringFilter<"Curation"> | string
    password?: StringFilter<"Curation"> | string
    trendy?: IntFilter<"Curation"> | number
    personality?: IntFilter<"Curation"> | number
    practicality?: IntFilter<"Curation"> | number
    costEffectiveness?: IntFilter<"Curation"> | number
    createdAt?: DateTimeFilter<"Curation"> | Date | string
    updatedAt?: DateTimeFilter<"Curation"> | Date | string
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
    comments?: CommentListRelationFilter
  }, "curationId">

  export type CurationOrderByWithAggregationInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    nickname?: SortOrder
    content?: SortOrder
    password?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CurationCountOrderByAggregateInput
    _avg?: CurationAvgOrderByAggregateInput
    _max?: CurationMaxOrderByAggregateInput
    _min?: CurationMinOrderByAggregateInput
    _sum?: CurationSumOrderByAggregateInput
  }

  export type CurationScalarWhereWithAggregatesInput = {
    AND?: CurationScalarWhereWithAggregatesInput | CurationScalarWhereWithAggregatesInput[]
    OR?: CurationScalarWhereWithAggregatesInput[]
    NOT?: CurationScalarWhereWithAggregatesInput | CurationScalarWhereWithAggregatesInput[]
    curationId?: IntWithAggregatesFilter<"Curation"> | number
    styleId?: IntWithAggregatesFilter<"Curation"> | number
    nickname?: StringWithAggregatesFilter<"Curation"> | string
    content?: StringWithAggregatesFilter<"Curation"> | string
    password?: StringWithAggregatesFilter<"Curation"> | string
    trendy?: IntWithAggregatesFilter<"Curation"> | number
    personality?: IntWithAggregatesFilter<"Curation"> | number
    practicality?: IntWithAggregatesFilter<"Curation"> | number
    costEffectiveness?: IntWithAggregatesFilter<"Curation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Curation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Curation"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    commentId?: IntFilter<"Comment"> | number
    curationId?: IntFilter<"Comment"> | number
    styleId?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    password?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    curation?: XOR<CurationScalarRelationFilter, CurationWhereInput>
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
    content?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    curation?: CurationOrderByWithRelationInput
    style?: StyleOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    commentId?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    curationId?: IntFilter<"Comment"> | number
    styleId?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    password?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    curation?: XOR<CurationScalarRelationFilter, CurationWhereInput>
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }, "commentId">

  export type CommentOrderByWithAggregationInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
    content?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    commentId?: IntWithAggregatesFilter<"Comment"> | number
    curationId?: IntWithAggregatesFilter<"Comment"> | number
    styleId?: IntWithAggregatesFilter<"Comment"> | number
    content?: StringWithAggregatesFilter<"Comment"> | string
    password?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryId?: IntFilter<"Category"> | number
    styleId?: IntFilter<"Category"> | number
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    name?: StringFilter<"Category"> | string
    brand?: StringFilter<"Category"> | string
    price?: BigIntFilter<"Category"> | bigint | number
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }

  export type CategoryOrderByWithRelationInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    style?: StyleOrderByWithRelationInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    categoryId?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    styleId?: IntFilter<"Category"> | number
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    name?: StringFilter<"Category"> | string
    brand?: StringFilter<"Category"> | string
    price?: BigIntFilter<"Category"> | bigint | number
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }, "categoryId">

  export type CategoryOrderByWithAggregationInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    categoryId?: IntWithAggregatesFilter<"Category"> | number
    styleId?: IntWithAggregatesFilter<"Category"> | number
    type?: EnumCategoryTypeWithAggregatesFilter<"Category"> | $Enums.CategoryType
    name?: StringWithAggregatesFilter<"Category"> | string
    brand?: StringWithAggregatesFilter<"Category"> | string
    price?: BigIntWithAggregatesFilter<"Category"> | bigint | number
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    imageId?: IntFilter<"Image"> | number
    styleId?: IntFilter<"Image"> | number
    imageUrl?: StringFilter<"Image"> | string
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    imageId?: SortOrder
    styleId?: SortOrder
    imageUrl?: SortOrder
    style?: StyleOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    imageId?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    styleId?: IntFilter<"Image"> | number
    imageUrl?: StringFilter<"Image"> | string
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }, "imageId">

  export type ImageOrderByWithAggregationInput = {
    imageId?: SortOrder
    styleId?: SortOrder
    imageUrl?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    imageId?: IntWithAggregatesFilter<"Image"> | number
    styleId?: IntWithAggregatesFilter<"Image"> | number
    imageUrl?: StringWithAggregatesFilter<"Image"> | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    tagId?: IntFilter<"Tag"> | number
    name?: StringFilter<"Tag"> | string
    styleTags?: StyleTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    tagId?: SortOrder
    name?: SortOrder
    styleTags?: StyleTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    tagId?: number
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    styleTags?: StyleTagListRelationFilter
  }, "tagId" | "name">

  export type TagOrderByWithAggregationInput = {
    tagId?: SortOrder
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    tagId?: IntWithAggregatesFilter<"Tag"> | number
    name?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type StyleTagWhereInput = {
    AND?: StyleTagWhereInput | StyleTagWhereInput[]
    OR?: StyleTagWhereInput[]
    NOT?: StyleTagWhereInput | StyleTagWhereInput[]
    styleId?: IntFilter<"StyleTag"> | number
    tagId?: IntFilter<"StyleTag"> | number
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }

  export type StyleTagOrderByWithRelationInput = {
    styleId?: SortOrder
    tagId?: SortOrder
    tag?: TagOrderByWithRelationInput
    style?: StyleOrderByWithRelationInput
  }

  export type StyleTagWhereUniqueInput = Prisma.AtLeast<{
    styleId_tagId?: StyleTagStyleIdTagIdCompoundUniqueInput
    AND?: StyleTagWhereInput | StyleTagWhereInput[]
    OR?: StyleTagWhereInput[]
    NOT?: StyleTagWhereInput | StyleTagWhereInput[]
    styleId?: IntFilter<"StyleTag"> | number
    tagId?: IntFilter<"StyleTag"> | number
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
    style?: XOR<StyleScalarRelationFilter, StyleWhereInput>
  }, "styleId_tagId">

  export type StyleTagOrderByWithAggregationInput = {
    styleId?: SortOrder
    tagId?: SortOrder
    _count?: StyleTagCountOrderByAggregateInput
    _avg?: StyleTagAvgOrderByAggregateInput
    _max?: StyleTagMaxOrderByAggregateInput
    _min?: StyleTagMinOrderByAggregateInput
    _sum?: StyleTagSumOrderByAggregateInput
  }

  export type StyleTagScalarWhereWithAggregatesInput = {
    AND?: StyleTagScalarWhereWithAggregatesInput | StyleTagScalarWhereWithAggregatesInput[]
    OR?: StyleTagScalarWhereWithAggregatesInput[]
    NOT?: StyleTagScalarWhereWithAggregatesInput | StyleTagScalarWhereWithAggregatesInput[]
    styleId?: IntWithAggregatesFilter<"StyleTag"> | number
    tagId?: IntWithAggregatesFilter<"StyleTag"> | number
  }

  export type StyleCreateInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationCreateNestedManyWithoutStyleInput
    categories?: CategoryCreateNestedManyWithoutStyleInput
    comments?: CommentCreateNestedManyWithoutStyleInput
    images?: ImageCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationUncheckedCreateNestedManyWithoutStyleInput
    categories?: CategoryUncheckedCreateNestedManyWithoutStyleInput
    comments?: CommentUncheckedCreateNestedManyWithoutStyleInput
    images?: ImageUncheckedCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleUpdateInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUpdateManyWithoutStyleNestedInput
    categories?: CategoryUpdateManyWithoutStyleNestedInput
    comments?: CommentUpdateManyWithoutStyleNestedInput
    images?: ImageUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUncheckedUpdateManyWithoutStyleNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutStyleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStyleNestedInput
    images?: ImageUncheckedUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateManyInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StyleUpdateManyMutationInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleUncheckedUpdateManyInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurationCreateInput = {
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
    style: StyleCreateNestedOneWithoutCurationsInput
    comments?: CommentCreateNestedManyWithoutCurationInput
  }

  export type CurationUncheckedCreateInput = {
    curationId?: number
    styleId: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutCurationInput
  }

  export type CurationUpdateInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    style?: StyleUpdateOneRequiredWithoutCurationsNestedInput
    comments?: CommentUpdateManyWithoutCurationNestedInput
  }

  export type CurationUncheckedUpdateInput = {
    curationId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutCurationNestedInput
  }

  export type CurationCreateManyInput = {
    curationId?: number
    styleId: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurationUpdateManyMutationInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurationUncheckedUpdateManyInput = {
    curationId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    curation: CurationCreateNestedOneWithoutCommentsInput
    style: StyleCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    commentId?: number
    curationId: number
    styleId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curation?: CurationUpdateOneRequiredWithoutCommentsNestedInput
    style?: StyleUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    curationId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    commentId?: number
    curationId: number
    styleId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    curationId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
    style: StyleCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    categoryId?: number
    styleId: number
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
  }

  export type CategoryUpdateInput = {
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    style?: StyleUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryCreateManyInput = {
    categoryId?: number
    styleId: number
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
  }

  export type CategoryUpdateManyMutationInput = {
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryUncheckedUpdateManyInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ImageCreateInput = {
    imageUrl: string
    style: StyleCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    imageId?: number
    styleId: number
    imageUrl: string
  }

  export type ImageUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    style?: StyleUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    imageId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateManyInput = {
    imageId?: number
    styleId: number
    imageUrl: string
  }

  export type ImageUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    imageId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    name: string
    styleTags?: StyleTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    tagId?: number
    name: string
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    styleTags?: StyleTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    tagId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    styleTags?: StyleTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    tagId?: number
    name: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    tagId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StyleTagCreateInput = {
    tag: TagCreateNestedOneWithoutStyleTagsInput
    style: StyleCreateNestedOneWithoutStyleTagsInput
  }

  export type StyleTagUncheckedCreateInput = {
    styleId: number
    tagId: number
  }

  export type StyleTagUpdateInput = {
    tag?: TagUpdateOneRequiredWithoutStyleTagsNestedInput
    style?: StyleUpdateOneRequiredWithoutStyleTagsNestedInput
  }

  export type StyleTagUncheckedUpdateInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type StyleTagCreateManyInput = {
    styleId: number
    tagId: number
  }

  export type StyleTagUpdateManyMutationInput = {

  }

  export type StyleTagUncheckedUpdateManyInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CurationListRelationFilter = {
    every?: CurationWhereInput
    some?: CurationWhereInput
    none?: CurationWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type StyleTagListRelationFilter = {
    every?: StyleTagWhereInput
    some?: StyleTagWhereInput
    none?: StyleTagWhereInput
  }

  export type CurationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StyleTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StyleCountOrderByAggregateInput = {
    styleId?: SortOrder
    nickname?: SortOrder
    title?: SortOrder
    content?: SortOrder
    password?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleAvgOrderByAggregateInput = {
    styleId?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
  }

  export type StyleMaxOrderByAggregateInput = {
    styleId?: SortOrder
    nickname?: SortOrder
    title?: SortOrder
    content?: SortOrder
    password?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleMinOrderByAggregateInput = {
    styleId?: SortOrder
    nickname?: SortOrder
    title?: SortOrder
    content?: SortOrder
    password?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleSumOrderByAggregateInput = {
    styleId?: SortOrder
    curationCount?: SortOrder
    viewCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StyleScalarRelationFilter = {
    is?: StyleWhereInput
    isNot?: StyleWhereInput
  }

  export type CurationCountOrderByAggregateInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    nickname?: SortOrder
    content?: SortOrder
    password?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurationAvgOrderByAggregateInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
  }

  export type CurationMaxOrderByAggregateInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    nickname?: SortOrder
    content?: SortOrder
    password?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurationMinOrderByAggregateInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    nickname?: SortOrder
    content?: SortOrder
    password?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurationSumOrderByAggregateInput = {
    curationId?: SortOrder
    styleId?: SortOrder
    trendy?: SortOrder
    personality?: SortOrder
    practicality?: SortOrder
    costEffectiveness?: SortOrder
  }

  export type CurationScalarRelationFilter = {
    is?: CurationWhereInput
    isNot?: CurationWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
    content?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
    content?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
    content?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    commentId?: SortOrder
    curationId?: SortOrder
    styleId?: SortOrder
  }

  export type EnumCategoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeFilter<$PrismaModel> | $Enums.CategoryType
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type CategoryCountOrderByAggregateInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    price?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    categoryId?: SortOrder
    styleId?: SortOrder
    price?: SortOrder
  }

  export type EnumCategoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.CategoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryTypeFilter<$PrismaModel>
    _max?: NestedEnumCategoryTypeFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type ImageCountOrderByAggregateInput = {
    imageId?: SortOrder
    styleId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    imageId?: SortOrder
    styleId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    imageId?: SortOrder
    styleId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    imageId?: SortOrder
    styleId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    imageId?: SortOrder
    styleId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    tagId?: SortOrder
    name?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    tagId?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    tagId?: SortOrder
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    tagId?: SortOrder
    name?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    tagId?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type StyleTagStyleIdTagIdCompoundUniqueInput = {
    styleId: number
    tagId: number
  }

  export type StyleTagCountOrderByAggregateInput = {
    styleId?: SortOrder
    tagId?: SortOrder
  }

  export type StyleTagAvgOrderByAggregateInput = {
    styleId?: SortOrder
    tagId?: SortOrder
  }

  export type StyleTagMaxOrderByAggregateInput = {
    styleId?: SortOrder
    tagId?: SortOrder
  }

  export type StyleTagMinOrderByAggregateInput = {
    styleId?: SortOrder
    tagId?: SortOrder
  }

  export type StyleTagSumOrderByAggregateInput = {
    styleId?: SortOrder
    tagId?: SortOrder
  }

  export type CurationCreateNestedManyWithoutStyleInput = {
    create?: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput> | CurationCreateWithoutStyleInput[] | CurationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CurationCreateOrConnectWithoutStyleInput | CurationCreateOrConnectWithoutStyleInput[]
    createMany?: CurationCreateManyStyleInputEnvelope
    connect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutStyleInput = {
    create?: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput> | CategoryCreateWithoutStyleInput[] | CategoryUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStyleInput | CategoryCreateOrConnectWithoutStyleInput[]
    createMany?: CategoryCreateManyStyleInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutStyleInput = {
    create?: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput> | CommentCreateWithoutStyleInput[] | CommentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStyleInput | CommentCreateOrConnectWithoutStyleInput[]
    createMany?: CommentCreateManyStyleInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutStyleInput = {
    create?: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput> | ImageCreateWithoutStyleInput[] | ImageUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutStyleInput | ImageCreateOrConnectWithoutStyleInput[]
    createMany?: ImageCreateManyStyleInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type StyleTagCreateNestedManyWithoutStyleInput = {
    create?: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput> | StyleTagCreateWithoutStyleInput[] | StyleTagUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutStyleInput | StyleTagCreateOrConnectWithoutStyleInput[]
    createMany?: StyleTagCreateManyStyleInputEnvelope
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
  }

  export type CurationUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput> | CurationCreateWithoutStyleInput[] | CurationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CurationCreateOrConnectWithoutStyleInput | CurationCreateOrConnectWithoutStyleInput[]
    createMany?: CurationCreateManyStyleInputEnvelope
    connect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput> | CategoryCreateWithoutStyleInput[] | CategoryUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStyleInput | CategoryCreateOrConnectWithoutStyleInput[]
    createMany?: CategoryCreateManyStyleInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput> | CommentCreateWithoutStyleInput[] | CommentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStyleInput | CommentCreateOrConnectWithoutStyleInput[]
    createMany?: CommentCreateManyStyleInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput> | ImageCreateWithoutStyleInput[] | ImageUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutStyleInput | ImageCreateOrConnectWithoutStyleInput[]
    createMany?: ImageCreateManyStyleInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type StyleTagUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput> | StyleTagCreateWithoutStyleInput[] | StyleTagUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutStyleInput | StyleTagCreateOrConnectWithoutStyleInput[]
    createMany?: StyleTagCreateManyStyleInputEnvelope
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CurationUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput> | CurationCreateWithoutStyleInput[] | CurationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CurationCreateOrConnectWithoutStyleInput | CurationCreateOrConnectWithoutStyleInput[]
    upsert?: CurationUpsertWithWhereUniqueWithoutStyleInput | CurationUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CurationCreateManyStyleInputEnvelope
    set?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    disconnect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    delete?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    connect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    update?: CurationUpdateWithWhereUniqueWithoutStyleInput | CurationUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CurationUpdateManyWithWhereWithoutStyleInput | CurationUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CurationScalarWhereInput | CurationScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput> | CategoryCreateWithoutStyleInput[] | CategoryUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStyleInput | CategoryCreateOrConnectWithoutStyleInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStyleInput | CategoryUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CategoryCreateManyStyleInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStyleInput | CategoryUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStyleInput | CategoryUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput> | CommentCreateWithoutStyleInput[] | CommentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStyleInput | CommentCreateOrConnectWithoutStyleInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutStyleInput | CommentUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CommentCreateManyStyleInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutStyleInput | CommentUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutStyleInput | CommentUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput> | ImageCreateWithoutStyleInput[] | ImageUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutStyleInput | ImageCreateOrConnectWithoutStyleInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutStyleInput | ImageUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ImageCreateManyStyleInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutStyleInput | ImageUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutStyleInput | ImageUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type StyleTagUpdateManyWithoutStyleNestedInput = {
    create?: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput> | StyleTagCreateWithoutStyleInput[] | StyleTagUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutStyleInput | StyleTagCreateOrConnectWithoutStyleInput[]
    upsert?: StyleTagUpsertWithWhereUniqueWithoutStyleInput | StyleTagUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: StyleTagCreateManyStyleInputEnvelope
    set?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    disconnect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    delete?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    update?: StyleTagUpdateWithWhereUniqueWithoutStyleInput | StyleTagUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: StyleTagUpdateManyWithWhereWithoutStyleInput | StyleTagUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
  }

  export type CurationUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput> | CurationCreateWithoutStyleInput[] | CurationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CurationCreateOrConnectWithoutStyleInput | CurationCreateOrConnectWithoutStyleInput[]
    upsert?: CurationUpsertWithWhereUniqueWithoutStyleInput | CurationUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CurationCreateManyStyleInputEnvelope
    set?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    disconnect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    delete?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    connect?: CurationWhereUniqueInput | CurationWhereUniqueInput[]
    update?: CurationUpdateWithWhereUniqueWithoutStyleInput | CurationUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CurationUpdateManyWithWhereWithoutStyleInput | CurationUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CurationScalarWhereInput | CurationScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput> | CategoryCreateWithoutStyleInput[] | CategoryUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStyleInput | CategoryCreateOrConnectWithoutStyleInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStyleInput | CategoryUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CategoryCreateManyStyleInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStyleInput | CategoryUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStyleInput | CategoryUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput> | CommentCreateWithoutStyleInput[] | CommentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStyleInput | CommentCreateOrConnectWithoutStyleInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutStyleInput | CommentUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: CommentCreateManyStyleInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutStyleInput | CommentUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutStyleInput | CommentUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput> | ImageCreateWithoutStyleInput[] | ImageUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutStyleInput | ImageCreateOrConnectWithoutStyleInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutStyleInput | ImageUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ImageCreateManyStyleInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutStyleInput | ImageUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutStyleInput | ImageUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type StyleTagUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput> | StyleTagCreateWithoutStyleInput[] | StyleTagUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutStyleInput | StyleTagCreateOrConnectWithoutStyleInput[]
    upsert?: StyleTagUpsertWithWhereUniqueWithoutStyleInput | StyleTagUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: StyleTagCreateManyStyleInputEnvelope
    set?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    disconnect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    delete?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    update?: StyleTagUpdateWithWhereUniqueWithoutStyleInput | StyleTagUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: StyleTagUpdateManyWithWhereWithoutStyleInput | StyleTagUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
  }

  export type StyleCreateNestedOneWithoutCurationsInput = {
    create?: XOR<StyleCreateWithoutCurationsInput, StyleUncheckedCreateWithoutCurationsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCurationsInput
    connect?: StyleWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutCurationInput = {
    create?: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput> | CommentCreateWithoutCurationInput[] | CommentUncheckedCreateWithoutCurationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCurationInput | CommentCreateOrConnectWithoutCurationInput[]
    createMany?: CommentCreateManyCurationInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCurationInput = {
    create?: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput> | CommentCreateWithoutCurationInput[] | CommentUncheckedCreateWithoutCurationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCurationInput | CommentCreateOrConnectWithoutCurationInput[]
    createMany?: CommentCreateManyCurationInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type StyleUpdateOneRequiredWithoutCurationsNestedInput = {
    create?: XOR<StyleCreateWithoutCurationsInput, StyleUncheckedCreateWithoutCurationsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCurationsInput
    upsert?: StyleUpsertWithoutCurationsInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutCurationsInput, StyleUpdateWithoutCurationsInput>, StyleUncheckedUpdateWithoutCurationsInput>
  }

  export type CommentUpdateManyWithoutCurationNestedInput = {
    create?: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput> | CommentCreateWithoutCurationInput[] | CommentUncheckedCreateWithoutCurationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCurationInput | CommentCreateOrConnectWithoutCurationInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCurationInput | CommentUpsertWithWhereUniqueWithoutCurationInput[]
    createMany?: CommentCreateManyCurationInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCurationInput | CommentUpdateWithWhereUniqueWithoutCurationInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCurationInput | CommentUpdateManyWithWhereWithoutCurationInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCurationNestedInput = {
    create?: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput> | CommentCreateWithoutCurationInput[] | CommentUncheckedCreateWithoutCurationInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCurationInput | CommentCreateOrConnectWithoutCurationInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCurationInput | CommentUpsertWithWhereUniqueWithoutCurationInput[]
    createMany?: CommentCreateManyCurationInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCurationInput | CommentUpdateWithWhereUniqueWithoutCurationInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCurationInput | CommentUpdateManyWithWhereWithoutCurationInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CurationCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CurationCreateWithoutCommentsInput, CurationUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CurationCreateOrConnectWithoutCommentsInput
    connect?: CurationWhereUniqueInput
  }

  export type StyleCreateNestedOneWithoutCommentsInput = {
    create?: XOR<StyleCreateWithoutCommentsInput, StyleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCommentsInput
    connect?: StyleWhereUniqueInput
  }

  export type CurationUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<CurationCreateWithoutCommentsInput, CurationUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CurationCreateOrConnectWithoutCommentsInput
    upsert?: CurationUpsertWithoutCommentsInput
    connect?: CurationWhereUniqueInput
    update?: XOR<XOR<CurationUpdateToOneWithWhereWithoutCommentsInput, CurationUpdateWithoutCommentsInput>, CurationUncheckedUpdateWithoutCommentsInput>
  }

  export type StyleUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<StyleCreateWithoutCommentsInput, StyleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCommentsInput
    upsert?: StyleUpsertWithoutCommentsInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutCommentsInput, StyleUpdateWithoutCommentsInput>, StyleUncheckedUpdateWithoutCommentsInput>
  }

  export type StyleCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<StyleCreateWithoutCategoriesInput, StyleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCategoriesInput
    connect?: StyleWhereUniqueInput
  }

  export type EnumCategoryTypeFieldUpdateOperationsInput = {
    set?: $Enums.CategoryType
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StyleUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<StyleCreateWithoutCategoriesInput, StyleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutCategoriesInput
    upsert?: StyleUpsertWithoutCategoriesInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutCategoriesInput, StyleUpdateWithoutCategoriesInput>, StyleUncheckedUpdateWithoutCategoriesInput>
  }

  export type StyleCreateNestedOneWithoutImagesInput = {
    create?: XOR<StyleCreateWithoutImagesInput, StyleUncheckedCreateWithoutImagesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutImagesInput
    connect?: StyleWhereUniqueInput
  }

  export type StyleUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<StyleCreateWithoutImagesInput, StyleUncheckedCreateWithoutImagesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutImagesInput
    upsert?: StyleUpsertWithoutImagesInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutImagesInput, StyleUpdateWithoutImagesInput>, StyleUncheckedUpdateWithoutImagesInput>
  }

  export type StyleTagCreateNestedManyWithoutTagInput = {
    create?: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput> | StyleTagCreateWithoutTagInput[] | StyleTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutTagInput | StyleTagCreateOrConnectWithoutTagInput[]
    createMany?: StyleTagCreateManyTagInputEnvelope
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
  }

  export type StyleTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput> | StyleTagCreateWithoutTagInput[] | StyleTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutTagInput | StyleTagCreateOrConnectWithoutTagInput[]
    createMany?: StyleTagCreateManyTagInputEnvelope
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
  }

  export type StyleTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput> | StyleTagCreateWithoutTagInput[] | StyleTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutTagInput | StyleTagCreateOrConnectWithoutTagInput[]
    upsert?: StyleTagUpsertWithWhereUniqueWithoutTagInput | StyleTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: StyleTagCreateManyTagInputEnvelope
    set?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    disconnect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    delete?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    update?: StyleTagUpdateWithWhereUniqueWithoutTagInput | StyleTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: StyleTagUpdateManyWithWhereWithoutTagInput | StyleTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
  }

  export type StyleTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput> | StyleTagCreateWithoutTagInput[] | StyleTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StyleTagCreateOrConnectWithoutTagInput | StyleTagCreateOrConnectWithoutTagInput[]
    upsert?: StyleTagUpsertWithWhereUniqueWithoutTagInput | StyleTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: StyleTagCreateManyTagInputEnvelope
    set?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    disconnect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    delete?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    connect?: StyleTagWhereUniqueInput | StyleTagWhereUniqueInput[]
    update?: StyleTagUpdateWithWhereUniqueWithoutTagInput | StyleTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: StyleTagUpdateManyWithWhereWithoutTagInput | StyleTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
  }

  export type TagCreateNestedOneWithoutStyleTagsInput = {
    create?: XOR<TagCreateWithoutStyleTagsInput, TagUncheckedCreateWithoutStyleTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutStyleTagsInput
    connect?: TagWhereUniqueInput
  }

  export type StyleCreateNestedOneWithoutStyleTagsInput = {
    create?: XOR<StyleCreateWithoutStyleTagsInput, StyleUncheckedCreateWithoutStyleTagsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutStyleTagsInput
    connect?: StyleWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutStyleTagsNestedInput = {
    create?: XOR<TagCreateWithoutStyleTagsInput, TagUncheckedCreateWithoutStyleTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutStyleTagsInput
    upsert?: TagUpsertWithoutStyleTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutStyleTagsInput, TagUpdateWithoutStyleTagsInput>, TagUncheckedUpdateWithoutStyleTagsInput>
  }

  export type StyleUpdateOneRequiredWithoutStyleTagsNestedInput = {
    create?: XOR<StyleCreateWithoutStyleTagsInput, StyleUncheckedCreateWithoutStyleTagsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutStyleTagsInput
    upsert?: StyleUpsertWithoutStyleTagsInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutStyleTagsInput, StyleUpdateWithoutStyleTagsInput>, StyleUncheckedUpdateWithoutStyleTagsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCategoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeFilter<$PrismaModel> | $Enums.CategoryType
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryType | EnumCategoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryType[] | ListEnumCategoryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.CategoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryTypeFilter<$PrismaModel>
    _max?: NestedEnumCategoryTypeFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type CurationCreateWithoutStyleInput = {
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutCurationInput
  }

  export type CurationUncheckedCreateWithoutStyleInput = {
    curationId?: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutCurationInput
  }

  export type CurationCreateOrConnectWithoutStyleInput = {
    where: CurationWhereUniqueInput
    create: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput>
  }

  export type CurationCreateManyStyleInputEnvelope = {
    data: CurationCreateManyStyleInput | CurationCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutStyleInput = {
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
  }

  export type CategoryUncheckedCreateWithoutStyleInput = {
    categoryId?: number
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
  }

  export type CategoryCreateOrConnectWithoutStyleInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput>
  }

  export type CategoryCreateManyStyleInputEnvelope = {
    data: CategoryCreateManyStyleInput | CategoryCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutStyleInput = {
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    curation: CurationCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutStyleInput = {
    commentId?: number
    curationId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutStyleInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput>
  }

  export type CommentCreateManyStyleInputEnvelope = {
    data: CommentCreateManyStyleInput | CommentCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutStyleInput = {
    imageUrl: string
  }

  export type ImageUncheckedCreateWithoutStyleInput = {
    imageId?: number
    imageUrl: string
  }

  export type ImageCreateOrConnectWithoutStyleInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput>
  }

  export type ImageCreateManyStyleInputEnvelope = {
    data: ImageCreateManyStyleInput | ImageCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type StyleTagCreateWithoutStyleInput = {
    tag: TagCreateNestedOneWithoutStyleTagsInput
  }

  export type StyleTagUncheckedCreateWithoutStyleInput = {
    tagId: number
  }

  export type StyleTagCreateOrConnectWithoutStyleInput = {
    where: StyleTagWhereUniqueInput
    create: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput>
  }

  export type StyleTagCreateManyStyleInputEnvelope = {
    data: StyleTagCreateManyStyleInput | StyleTagCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type CurationUpsertWithWhereUniqueWithoutStyleInput = {
    where: CurationWhereUniqueInput
    update: XOR<CurationUpdateWithoutStyleInput, CurationUncheckedUpdateWithoutStyleInput>
    create: XOR<CurationCreateWithoutStyleInput, CurationUncheckedCreateWithoutStyleInput>
  }

  export type CurationUpdateWithWhereUniqueWithoutStyleInput = {
    where: CurationWhereUniqueInput
    data: XOR<CurationUpdateWithoutStyleInput, CurationUncheckedUpdateWithoutStyleInput>
  }

  export type CurationUpdateManyWithWhereWithoutStyleInput = {
    where: CurationScalarWhereInput
    data: XOR<CurationUpdateManyMutationInput, CurationUncheckedUpdateManyWithoutStyleInput>
  }

  export type CurationScalarWhereInput = {
    AND?: CurationScalarWhereInput | CurationScalarWhereInput[]
    OR?: CurationScalarWhereInput[]
    NOT?: CurationScalarWhereInput | CurationScalarWhereInput[]
    curationId?: IntFilter<"Curation"> | number
    styleId?: IntFilter<"Curation"> | number
    nickname?: StringFilter<"Curation"> | string
    content?: StringFilter<"Curation"> | string
    password?: StringFilter<"Curation"> | string
    trendy?: IntFilter<"Curation"> | number
    personality?: IntFilter<"Curation"> | number
    practicality?: IntFilter<"Curation"> | number
    costEffectiveness?: IntFilter<"Curation"> | number
    createdAt?: DateTimeFilter<"Curation"> | Date | string
    updatedAt?: DateTimeFilter<"Curation"> | Date | string
  }

  export type CategoryUpsertWithWhereUniqueWithoutStyleInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutStyleInput, CategoryUncheckedUpdateWithoutStyleInput>
    create: XOR<CategoryCreateWithoutStyleInput, CategoryUncheckedCreateWithoutStyleInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutStyleInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutStyleInput, CategoryUncheckedUpdateWithoutStyleInput>
  }

  export type CategoryUpdateManyWithWhereWithoutStyleInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutStyleInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    categoryId?: IntFilter<"Category"> | number
    styleId?: IntFilter<"Category"> | number
    type?: EnumCategoryTypeFilter<"Category"> | $Enums.CategoryType
    name?: StringFilter<"Category"> | string
    brand?: StringFilter<"Category"> | string
    price?: BigIntFilter<"Category"> | bigint | number
  }

  export type CommentUpsertWithWhereUniqueWithoutStyleInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutStyleInput, CommentUncheckedUpdateWithoutStyleInput>
    create: XOR<CommentCreateWithoutStyleInput, CommentUncheckedCreateWithoutStyleInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutStyleInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutStyleInput, CommentUncheckedUpdateWithoutStyleInput>
  }

  export type CommentUpdateManyWithWhereWithoutStyleInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutStyleInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    commentId?: IntFilter<"Comment"> | number
    curationId?: IntFilter<"Comment"> | number
    styleId?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    password?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type ImageUpsertWithWhereUniqueWithoutStyleInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutStyleInput, ImageUncheckedUpdateWithoutStyleInput>
    create: XOR<ImageCreateWithoutStyleInput, ImageUncheckedCreateWithoutStyleInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutStyleInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutStyleInput, ImageUncheckedUpdateWithoutStyleInput>
  }

  export type ImageUpdateManyWithWhereWithoutStyleInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutStyleInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    imageId?: IntFilter<"Image"> | number
    styleId?: IntFilter<"Image"> | number
    imageUrl?: StringFilter<"Image"> | string
  }

  export type StyleTagUpsertWithWhereUniqueWithoutStyleInput = {
    where: StyleTagWhereUniqueInput
    update: XOR<StyleTagUpdateWithoutStyleInput, StyleTagUncheckedUpdateWithoutStyleInput>
    create: XOR<StyleTagCreateWithoutStyleInput, StyleTagUncheckedCreateWithoutStyleInput>
  }

  export type StyleTagUpdateWithWhereUniqueWithoutStyleInput = {
    where: StyleTagWhereUniqueInput
    data: XOR<StyleTagUpdateWithoutStyleInput, StyleTagUncheckedUpdateWithoutStyleInput>
  }

  export type StyleTagUpdateManyWithWhereWithoutStyleInput = {
    where: StyleTagScalarWhereInput
    data: XOR<StyleTagUpdateManyMutationInput, StyleTagUncheckedUpdateManyWithoutStyleInput>
  }

  export type StyleTagScalarWhereInput = {
    AND?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
    OR?: StyleTagScalarWhereInput[]
    NOT?: StyleTagScalarWhereInput | StyleTagScalarWhereInput[]
    styleId?: IntFilter<"StyleTag"> | number
    tagId?: IntFilter<"StyleTag"> | number
  }

  export type StyleCreateWithoutCurationsInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CategoryCreateNestedManyWithoutStyleInput
    comments?: CommentCreateNestedManyWithoutStyleInput
    images?: ImageCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutCurationsInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CategoryUncheckedCreateNestedManyWithoutStyleInput
    comments?: CommentUncheckedCreateNestedManyWithoutStyleInput
    images?: ImageUncheckedCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutCurationsInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutCurationsInput, StyleUncheckedCreateWithoutCurationsInput>
  }

  export type CommentCreateWithoutCurationInput = {
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    style: StyleCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCurationInput = {
    commentId?: number
    styleId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutCurationInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput>
  }

  export type CommentCreateManyCurationInputEnvelope = {
    data: CommentCreateManyCurationInput | CommentCreateManyCurationInput[]
    skipDuplicates?: boolean
  }

  export type StyleUpsertWithoutCurationsInput = {
    update: XOR<StyleUpdateWithoutCurationsInput, StyleUncheckedUpdateWithoutCurationsInput>
    create: XOR<StyleCreateWithoutCurationsInput, StyleUncheckedCreateWithoutCurationsInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutCurationsInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutCurationsInput, StyleUncheckedUpdateWithoutCurationsInput>
  }

  export type StyleUpdateWithoutCurationsInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateManyWithoutStyleNestedInput
    comments?: CommentUpdateManyWithoutStyleNestedInput
    images?: ImageUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutCurationsInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUncheckedUpdateManyWithoutStyleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStyleNestedInput
    images?: ImageUncheckedUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutCurationInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCurationInput, CommentUncheckedUpdateWithoutCurationInput>
    create: XOR<CommentCreateWithoutCurationInput, CommentUncheckedCreateWithoutCurationInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCurationInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCurationInput, CommentUncheckedUpdateWithoutCurationInput>
  }

  export type CommentUpdateManyWithWhereWithoutCurationInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCurationInput>
  }

  export type CurationCreateWithoutCommentsInput = {
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
    style: StyleCreateNestedOneWithoutCurationsInput
  }

  export type CurationUncheckedCreateWithoutCommentsInput = {
    curationId?: number
    styleId: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurationCreateOrConnectWithoutCommentsInput = {
    where: CurationWhereUniqueInput
    create: XOR<CurationCreateWithoutCommentsInput, CurationUncheckedCreateWithoutCommentsInput>
  }

  export type StyleCreateWithoutCommentsInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationCreateNestedManyWithoutStyleInput
    categories?: CategoryCreateNestedManyWithoutStyleInput
    images?: ImageCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutCommentsInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationUncheckedCreateNestedManyWithoutStyleInput
    categories?: CategoryUncheckedCreateNestedManyWithoutStyleInput
    images?: ImageUncheckedCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutCommentsInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutCommentsInput, StyleUncheckedCreateWithoutCommentsInput>
  }

  export type CurationUpsertWithoutCommentsInput = {
    update: XOR<CurationUpdateWithoutCommentsInput, CurationUncheckedUpdateWithoutCommentsInput>
    create: XOR<CurationCreateWithoutCommentsInput, CurationUncheckedCreateWithoutCommentsInput>
    where?: CurationWhereInput
  }

  export type CurationUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CurationWhereInput
    data: XOR<CurationUpdateWithoutCommentsInput, CurationUncheckedUpdateWithoutCommentsInput>
  }

  export type CurationUpdateWithoutCommentsInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    style?: StyleUpdateOneRequiredWithoutCurationsNestedInput
  }

  export type CurationUncheckedUpdateWithoutCommentsInput = {
    curationId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleUpsertWithoutCommentsInput = {
    update: XOR<StyleUpdateWithoutCommentsInput, StyleUncheckedUpdateWithoutCommentsInput>
    create: XOR<StyleCreateWithoutCommentsInput, StyleUncheckedCreateWithoutCommentsInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutCommentsInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutCommentsInput, StyleUncheckedUpdateWithoutCommentsInput>
  }

  export type StyleUpdateWithoutCommentsInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUpdateManyWithoutStyleNestedInput
    categories?: CategoryUpdateManyWithoutStyleNestedInput
    images?: ImageUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutCommentsInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUncheckedUpdateManyWithoutStyleNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutStyleNestedInput
    images?: ImageUncheckedUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateWithoutCategoriesInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationCreateNestedManyWithoutStyleInput
    comments?: CommentCreateNestedManyWithoutStyleInput
    images?: ImageCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutCategoriesInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationUncheckedCreateNestedManyWithoutStyleInput
    comments?: CommentUncheckedCreateNestedManyWithoutStyleInput
    images?: ImageUncheckedCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutCategoriesInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutCategoriesInput, StyleUncheckedCreateWithoutCategoriesInput>
  }

  export type StyleUpsertWithoutCategoriesInput = {
    update: XOR<StyleUpdateWithoutCategoriesInput, StyleUncheckedUpdateWithoutCategoriesInput>
    create: XOR<StyleCreateWithoutCategoriesInput, StyleUncheckedCreateWithoutCategoriesInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutCategoriesInput, StyleUncheckedUpdateWithoutCategoriesInput>
  }

  export type StyleUpdateWithoutCategoriesInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUpdateManyWithoutStyleNestedInput
    comments?: CommentUpdateManyWithoutStyleNestedInput
    images?: ImageUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutCategoriesInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUncheckedUpdateManyWithoutStyleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStyleNestedInput
    images?: ImageUncheckedUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateWithoutImagesInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationCreateNestedManyWithoutStyleInput
    categories?: CategoryCreateNestedManyWithoutStyleInput
    comments?: CommentCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutImagesInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationUncheckedCreateNestedManyWithoutStyleInput
    categories?: CategoryUncheckedCreateNestedManyWithoutStyleInput
    comments?: CommentUncheckedCreateNestedManyWithoutStyleInput
    styleTags?: StyleTagUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutImagesInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutImagesInput, StyleUncheckedCreateWithoutImagesInput>
  }

  export type StyleUpsertWithoutImagesInput = {
    update: XOR<StyleUpdateWithoutImagesInput, StyleUncheckedUpdateWithoutImagesInput>
    create: XOR<StyleCreateWithoutImagesInput, StyleUncheckedCreateWithoutImagesInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutImagesInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutImagesInput, StyleUncheckedUpdateWithoutImagesInput>
  }

  export type StyleUpdateWithoutImagesInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUpdateManyWithoutStyleNestedInput
    categories?: CategoryUpdateManyWithoutStyleNestedInput
    comments?: CommentUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutImagesInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUncheckedUpdateManyWithoutStyleNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutStyleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStyleNestedInput
    styleTags?: StyleTagUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleTagCreateWithoutTagInput = {
    style: StyleCreateNestedOneWithoutStyleTagsInput
  }

  export type StyleTagUncheckedCreateWithoutTagInput = {
    styleId: number
  }

  export type StyleTagCreateOrConnectWithoutTagInput = {
    where: StyleTagWhereUniqueInput
    create: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput>
  }

  export type StyleTagCreateManyTagInputEnvelope = {
    data: StyleTagCreateManyTagInput | StyleTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type StyleTagUpsertWithWhereUniqueWithoutTagInput = {
    where: StyleTagWhereUniqueInput
    update: XOR<StyleTagUpdateWithoutTagInput, StyleTagUncheckedUpdateWithoutTagInput>
    create: XOR<StyleTagCreateWithoutTagInput, StyleTagUncheckedCreateWithoutTagInput>
  }

  export type StyleTagUpdateWithWhereUniqueWithoutTagInput = {
    where: StyleTagWhereUniqueInput
    data: XOR<StyleTagUpdateWithoutTagInput, StyleTagUncheckedUpdateWithoutTagInput>
  }

  export type StyleTagUpdateManyWithWhereWithoutTagInput = {
    where: StyleTagScalarWhereInput
    data: XOR<StyleTagUpdateManyMutationInput, StyleTagUncheckedUpdateManyWithoutTagInput>
  }

  export type TagCreateWithoutStyleTagsInput = {
    name: string
  }

  export type TagUncheckedCreateWithoutStyleTagsInput = {
    tagId?: number
    name: string
  }

  export type TagCreateOrConnectWithoutStyleTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutStyleTagsInput, TagUncheckedCreateWithoutStyleTagsInput>
  }

  export type StyleCreateWithoutStyleTagsInput = {
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationCreateNestedManyWithoutStyleInput
    categories?: CategoryCreateNestedManyWithoutStyleInput
    comments?: CommentCreateNestedManyWithoutStyleInput
    images?: ImageCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutStyleTagsInput = {
    styleId?: number
    nickname: string
    title: string
    content: string
    password: string
    curationCount?: number
    viewCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    curations?: CurationUncheckedCreateNestedManyWithoutStyleInput
    categories?: CategoryUncheckedCreateNestedManyWithoutStyleInput
    comments?: CommentUncheckedCreateNestedManyWithoutStyleInput
    images?: ImageUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutStyleTagsInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutStyleTagsInput, StyleUncheckedCreateWithoutStyleTagsInput>
  }

  export type TagUpsertWithoutStyleTagsInput = {
    update: XOR<TagUpdateWithoutStyleTagsInput, TagUncheckedUpdateWithoutStyleTagsInput>
    create: XOR<TagCreateWithoutStyleTagsInput, TagUncheckedCreateWithoutStyleTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutStyleTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutStyleTagsInput, TagUncheckedUpdateWithoutStyleTagsInput>
  }

  export type TagUpdateWithoutStyleTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutStyleTagsInput = {
    tagId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StyleUpsertWithoutStyleTagsInput = {
    update: XOR<StyleUpdateWithoutStyleTagsInput, StyleUncheckedUpdateWithoutStyleTagsInput>
    create: XOR<StyleCreateWithoutStyleTagsInput, StyleUncheckedCreateWithoutStyleTagsInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutStyleTagsInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutStyleTagsInput, StyleUncheckedUpdateWithoutStyleTagsInput>
  }

  export type StyleUpdateWithoutStyleTagsInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUpdateManyWithoutStyleNestedInput
    categories?: CategoryUpdateManyWithoutStyleNestedInput
    comments?: CommentUpdateManyWithoutStyleNestedInput
    images?: ImageUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutStyleTagsInput = {
    styleId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    curationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curations?: CurationUncheckedUpdateManyWithoutStyleNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutStyleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStyleNestedInput
    images?: ImageUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type CurationCreateManyStyleInput = {
    curationId?: number
    nickname: string
    content: string
    password: string
    trendy: number
    personality: number
    practicality: number
    costEffectiveness: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateManyStyleInput = {
    categoryId?: number
    type: $Enums.CategoryType
    name: string
    brand: string
    price: bigint | number
  }

  export type CommentCreateManyStyleInput = {
    commentId?: number
    curationId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageCreateManyStyleInput = {
    imageId?: number
    imageUrl: string
  }

  export type StyleTagCreateManyStyleInput = {
    tagId: number
  }

  export type CurationUpdateWithoutStyleInput = {
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutCurationNestedInput
  }

  export type CurationUncheckedUpdateWithoutStyleInput = {
    curationId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutCurationNestedInput
  }

  export type CurationUncheckedUpdateManyWithoutStyleInput = {
    curationId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    trendy?: IntFieldUpdateOperationsInput | number
    personality?: IntFieldUpdateOperationsInput | number
    practicality?: IntFieldUpdateOperationsInput | number
    costEffectiveness?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpdateWithoutStyleInput = {
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryUncheckedUpdateWithoutStyleInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryUncheckedUpdateManyWithoutStyleInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumCategoryTypeFieldUpdateOperationsInput | $Enums.CategoryType
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CommentUpdateWithoutStyleInput = {
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    curation?: CurationUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutStyleInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    curationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutStyleInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    curationId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpdateWithoutStyleInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutStyleInput = {
    imageId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyWithoutStyleInput = {
    imageId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type StyleTagUpdateWithoutStyleInput = {
    tag?: TagUpdateOneRequiredWithoutStyleTagsNestedInput
  }

  export type StyleTagUncheckedUpdateWithoutStyleInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type StyleTagUncheckedUpdateManyWithoutStyleInput = {
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyCurationInput = {
    commentId?: number
    styleId: number
    content: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutCurationInput = {
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    style?: StyleUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCurationInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutCurationInput = {
    commentId?: IntFieldUpdateOperationsInput | number
    styleId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleTagCreateManyTagInput = {
    styleId: number
  }

  export type StyleTagUpdateWithoutTagInput = {
    style?: StyleUpdateOneRequiredWithoutStyleTagsNestedInput
  }

  export type StyleTagUncheckedUpdateWithoutTagInput = {
    styleId?: IntFieldUpdateOperationsInput | number
  }

  export type StyleTagUncheckedUpdateManyWithoutTagInput = {
    styleId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}